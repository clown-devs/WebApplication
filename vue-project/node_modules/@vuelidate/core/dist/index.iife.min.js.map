{"version":3,"file":"index.iife.min.js","sources":["../src/utils/index.js","../src/utils/createResults.js","../src/core.js","../src/utils/sortValidations.js","../src/storage.js","../src/utils/injectNestedComponentValidations.js","../src/utils/ComputedProxyFactory.js","../src/index.js"],"sourcesContent":["import { isRef, computed, ref, isReactive, isReadonly, unref as unwrap } from 'vue-demi'\n\nexport { unwrap }\n\nexport function unwrapObj (obj, ignoreKeys = []) {\n  return Object.keys(obj).reduce((o, k) => {\n    if (ignoreKeys.includes(k)) return o\n    o[k] = unwrap(obj[k])\n    return o\n  }, {})\n}\n\nexport function isFunction (val) {\n  return typeof val === 'function'\n}\n\nexport function isObject (val) {\n  return val !== null && (typeof val === 'object' || isFunction(val))\n}\n\nexport function isPromise (object) {\n  return isObject(object) && isFunction(object.then)\n}\n\nexport function paramToRef (param) {\n  if (isRef(param)) {\n    return param\n  } else if (typeof param === 'function') {\n    return computed(param)\n  } else {\n    return ref(param)\n  }\n}\n\nexport function isProxy (value) {\n  return isReactive(value) || isReadonly(value)\n}\n\nexport function get (obj, stringPath, def) {\n  // Cache the current object\n  let current = obj\n  const path = stringPath.split('.')\n  // For each item in the path, dig into the object\n  for (let i = 0; i < path.length; i++) {\n    // If the item isn't found, return the default (or null)\n    if (!current[path[i]]) return def\n\n    // Otherwise, update the current  value\n    current = current[path[i]]\n  }\n\n  return current\n}\n\nexport function gatherBooleanGroupProperties (group, nestedResults, property) {\n  return computed(() => {\n    return group.some((path) => {\n      return get(nestedResults, path, { [property]: false })[property]\n    })\n  })\n}\n\nexport function gatherArrayGroupProperties (group, nestedResults, property) {\n  return computed(() => {\n    return group.reduce((all, path) => {\n      const fetchedProperty = get(nestedResults, path, { [property]: false })[property] || []\n      return all.concat(fetchedProperty)\n    }, [])\n  })\n}\n","import { computed, ref, watch } from 'vue-demi'\nimport { isFunction, unwrap, unwrapObj } from '../utils'\n\n/**\n * Response form a raw Validator function.\n * Should return a Boolean or an object with $invalid property.\n * @typedef {Boolean | { $valid: Boolean }} ValidatorResponse\n */\n\n/**\n * Calls a validation rule by unwrapping its value first from a ref.\n * @param {Validator} rule\n * @param {Ref} value\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @return {Promise<ValidatorResponse> | ValidatorResponse}\n */\nfunction callRule (rule, value, siblingState, instance) {\n  return rule.call(instance, unwrap(value), unwrap(siblingState), instance)\n}\n\n/**\n * Normalizes the validator result\n * Allows passing a boolean of an object like `{ $valid: Boolean }`\n * @param {ValidatorResponse} result - Validator result\n * @return {boolean}\n */\nfunction normalizeValidatorResponse (result) {\n  return result.$valid !== undefined\n    ? !result.$valid\n    : !result\n}\n\n/**\n * Returns the result of an async validator.\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $pending\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Ref<*>[]} watchTargets\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @param {Ref<Number>} $lastCommittedOn\n * @return {{ $invalid: Ref<Boolean>, $unwatch: WatchStopHandle }}\n */\nfunction createAsyncResult (\n  rule,\n  model,\n  $pending,\n  $dirty,\n  {\n    $lazy,\n    $rewardEarly\n  },\n  $response,\n  instance,\n  watchTargets = [],\n  siblingState,\n  $lastInvalidState,\n  $lastCommittedOn\n) {\n  const $invalid = ref(!!$dirty.value)\n  const $pendingCounter = ref(0)\n\n  $pending.value = false\n\n  const $unwatch = watch(\n    [model, $dirty].concat(watchTargets, $lastCommittedOn),\n    () => {\n      if (\n        // if $lazy and not dirty, return\n        ($lazy && !$dirty.value) ||\n        // if in $rewardEarly mode and no previous errors, nothing pending, return\n        ($rewardEarly && !$lastInvalidState.value && !$pending.value)\n      ) {\n        return\n      }\n      let ruleResult\n      // make sure we dont break if a validator throws\n      try {\n        ruleResult = callRule(rule, model, siblingState, instance)\n      } catch (err) {\n        // convert to a promise, so we can handle it async\n        ruleResult = Promise.reject(err)\n      }\n\n      $pendingCounter.value++\n      $pending.value = !!$pendingCounter.value\n      // ensure $invalid is false, while validator is resolving\n      $invalid.value = false\n\n      Promise.resolve(ruleResult)\n        .then(data => {\n          $pendingCounter.value--\n          $pending.value = !!$pendingCounter.value\n          $response.value = data\n          $invalid.value = normalizeValidatorResponse(data)\n        })\n        .catch((error) => {\n          $pendingCounter.value--\n          $pending.value = !!$pendingCounter.value\n          $response.value = error\n          $invalid.value = true\n        })\n    }, { immediate: true, deep: typeof model === 'object' }\n  )\n\n  return { $invalid, $unwatch }\n}\n\n/**\n * Returns the result of a sync validator\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {Boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @return {{$unwatch: (function(): {}), $invalid: ComputedRef<boolean>}}\n */\nfunction createSyncResult (\n  rule,\n  model,\n  $dirty,\n  { $lazy, $rewardEarly },\n  $response,\n  instance,\n  siblingState,\n  $lastInvalidState\n) {\n  const $unwatch = () => ({})\n  const $invalid = computed(() => {\n    if (\n      // return early if $lazy mode and not touched\n      ($lazy && !$dirty.value) ||\n      // If $rewardEarly mode is ON and last invalid was false (no error), return it.\n      // If we want to invalidate, we just flip the last state to true, causing the computed to run again\n      ($rewardEarly && !$lastInvalidState.value)) {\n      return false\n    }\n    let returnValue = true\n    try {\n      const result = callRule(rule, model, siblingState, instance)\n      $response.value = result\n      returnValue = normalizeValidatorResponse(result)\n    } catch (err) {\n      $response.value = err\n    }\n    return returnValue\n  })\n  return { $unwatch, $invalid }\n}\n\n/**\n * Returns the validation result.\n * Detects async and sync validators.\n * @param {NormalizedValidator} rule\n * @param {Ref<*>} model\n * @param {Ref<boolean>} $dirty\n * @param {GlobalConfig} config - Vuelidate config\n * @param {VueInstance} instance - component instance\n * @param {string} validatorName - name of the current validator\n * @param {string} propertyKey - the current property we are validating\n * @param {string} propertyPath - the deep path to the validated property\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState - the last invalid state\n * @param {Ref<Number>} $lastCommittedOn - the last time $commit was called\n * @return {{ $params: *, $message: Ref<String>, $pending: Ref<Boolean>, $invalid: Ref<Boolean>, $response: Ref<*>, $unwatch: WatchStopHandle }}\n */\nexport function createValidatorResult (\n  rule,\n  model,\n  $dirty,\n  config,\n  instance,\n  validatorName,\n  propertyKey,\n  propertyPath,\n  siblingState,\n  $lastInvalidState,\n  $lastCommittedOn\n) {\n  const $pending = ref(false)\n  const $params = rule.$params || {}\n  const $response = ref(null)\n  let $invalid\n  let $unwatch\n\n  if (rule.$async) {\n    ({ $invalid, $unwatch } = createAsyncResult(\n      rule.$validator,\n      model,\n      $pending,\n      $dirty,\n      config,\n      $response,\n      instance,\n      rule.$watchTargets,\n      siblingState,\n      $lastInvalidState,\n      $lastCommittedOn\n    ))\n  } else {\n    ({ $invalid, $unwatch } = createSyncResult(\n      rule.$validator,\n      model,\n      $dirty,\n      config,\n      $response,\n      instance,\n      siblingState,\n      $lastInvalidState\n    ))\n  }\n\n  const message = rule.$message\n  const $message = isFunction(message)\n    ? computed(() =>\n      message(\n        unwrapObj({\n          $pending,\n          $invalid,\n          $params: unwrapObj($params), // $params can hold refs, so we unwrap them for easy access\n          $model: model,\n          $response,\n          $validator: validatorName,\n          $propertyPath: propertyPath,\n          $property: propertyKey\n        })\n      ))\n    : message || ''\n\n  return {\n    $message,\n    $params,\n    $pending,\n    $invalid,\n    $response,\n    $unwatch\n  }\n}\n","import { unwrap, gatherBooleanGroupProperties, gatherArrayGroupProperties } from './utils'\nimport { computed, isRef, nextTick, reactive, ref, watch } from 'vue-demi'\nimport { createValidatorResult } from './utils/createResults'\nimport { sortValidations } from './utils/sortValidations'\n\nconst ROOT_PATH = '__root'\n\n/** @typedef {import('vue-demi').ComponentPublicInstance} VueInstance */\n/** @typedef {import('vue-demi').ComputedRef} ComputedRef */\n/** @typedef {import('vue-demi').UnwrapRef} UnwrapRef */\n/** @typedef {import('vue-demi').WatchStopHandle} WatchStopHandle */\n/** @typedef {import('vue-demi').WritableComputedRef} WritableComputedRef */\n/** @typedef {import('vue-demi').UnwrapNestedRefs} UnwrapNestedRefs */\n\n/**\n * @typedef NormalizedValidator\n * @property {Validator} $validator\n * @property {String | Ref<String> | function(*): string} [$message]\n * @property {Object | Ref<Object>} [$params]\n * @property {Object | Ref<Object>} [$async]\n * @property {Ref<*>[]} [$watchTargets]\n */\n\n/**\n * Raw validator function, before being normalized\n * Can return a Promise or a {@see ValidatorResponse}\n * @typedef {function(*): ((Promise<ValidatorResponse> | ValidatorResponse))} Validator\n */\n\n/**\n * @typedef ErrorObject\n * @property {Ref<String>} $message - Reactive error message\n * @property {Ref<Object>} $params - Params passed from withParams\n * @property {Ref<Boolean>} $pending - If validation is pending\n * @property {String} $property - State key\n * @property {String} $propertyPath - Dot notation path to state\n * @property {String} $validator - Validator name\n * @property {String} $uid - Unique identifier\n */\n\n/**\n * @typedef ValidationResult\n * @property {Ref<Boolean>} $pending\n * @property {Ref<Boolean>} $dirty\n * @property {Ref<Boolean>} $invalid\n * @property {Ref<Boolean>} $error\n * @property {Ref<String>} $path\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} $commit\n */\n\n/**\n * Creates the main Validation Results object for a state tree\n * Walks the tree's top level branches\n * @param {Object<NormalizedValidator>} rules - Rules for the current state tree\n * @param {Object} model - Current state value\n * @param {String} key - Key for the current state tree\n * @param {ResultsStorage} [resultsCache] - A cache map of all the validators\n * @param {String} [path] - the current property path\n * @param {GlobalConfig} [config] - the config object\n * @param {VueInstance} instance\n * @param {ComputedRef<Object>} externalResults\n * @param {Object} siblingState\n * @return {ValidationResult | {}}\n */\nfunction createValidationResults (rules, model, key, resultsCache, path, config, instance, externalResults, siblingState) {\n  // collect the property keys\n  const ruleKeys = Object.keys(rules)\n\n  const cachedResult = resultsCache.get(path, rules)\n  const $dirty = ref(false)\n  // state for the $rewardEarly option\n  /** The last invalid state of this property */\n  const $lastInvalidState = ref(false)\n  /** The last time $commit was called. Used to re-trigger async calls */\n  const $lastCommittedOn = ref(0)\n\n  if (cachedResult) {\n    // if the rules are the same as before, use the cached results\n    if (!cachedResult.$partial) return cachedResult\n    // remove old watchers\n    cachedResult.$unwatch()\n    // use the `$dirty.value`, so we dont save references by accident\n    $dirty.value = cachedResult.$dirty.value\n  }\n\n  const result = {\n    // restore $dirty from cache\n    $dirty,\n    $path: path,\n    $touch: () => { if (!$dirty.value) $dirty.value = true },\n    $reset: () => { if ($dirty.value) $dirty.value = false },\n    $commit: () => {}\n  }\n\n  /**\n   * If there are no validation rules, it is most likely\n   * a top level state, aka root\n   */\n  if (!ruleKeys.length) {\n    // if there are cached results, we should overwrite them with the new ones\n    cachedResult && resultsCache.set(path, rules, result)\n\n    return result\n  }\n\n  ruleKeys.forEach(ruleKey => {\n    result[ruleKey] = createValidatorResult(\n      rules[ruleKey],\n      model,\n      result.$dirty,\n      config,\n      instance,\n      ruleKey,\n      key,\n      path,\n      siblingState,\n      $lastInvalidState,\n      $lastCommittedOn\n    )\n  })\n\n  result.$externalResults = computed(() => {\n    if (!externalResults.value) return []\n    return [].concat(externalResults.value).map((stringError, index) => ({\n      $propertyPath: path,\n      $property: key,\n      $validator: '$externalResults',\n      $uid: `${path}-externalResult-${index}`,\n      $message: stringError,\n      $params: {},\n      $response: null,\n      $pending: false\n    }))\n  })\n\n  result.$invalid = computed(() => {\n    const r = ruleKeys.some(ruleKey => unwrap(result[ruleKey].$invalid))\n    // cache the last invalid state\n    $lastInvalidState.value = r\n    return !!result.$externalResults.value.length || r\n  })\n\n  result.$pending = computed(() =>\n    ruleKeys.some(ruleKey => unwrap(result[ruleKey].$pending))\n  )\n\n  result.$error = computed(() =>\n    result.$dirty.value ? result.$pending.value || result.$invalid.value : false\n  )\n\n  result.$silentErrors = computed(() => ruleKeys\n    .filter(ruleKey => unwrap(result[ruleKey].$invalid))\n    .map(ruleKey => {\n      const res = result[ruleKey]\n      return reactive({\n        $propertyPath: path,\n        $property: key,\n        $validator: ruleKey,\n        $uid: `${path}-${ruleKey}`,\n        $message: res.$message,\n        $params: res.$params,\n        $response: res.$response,\n        $pending: res.$pending\n      })\n    })\n    .concat(result.$externalResults.value)\n  )\n\n  result.$errors = computed(() => result.$dirty.value\n    ? result.$silentErrors.value\n    : []\n  )\n\n  result.$unwatch = () => ruleKeys.forEach(ruleKey => {\n    result[ruleKey].$unwatch()\n  })\n\n  result.$commit = () => {\n    $lastInvalidState.value = true\n    $lastCommittedOn.value = Date.now()\n  }\n\n  resultsCache.set(path, rules, result)\n\n  return result\n}\n\n/**\n * Collects the validation results of all nested state properties\n * @param {Object<NormalizedValidator|Function>} validations - The validation\n * @param {Object} nestedState - Current state\n * @param {String} path - Path to current property\n * @param {ResultsStorage} resultsCache - Validations cache map\n * @param {GlobalConfig} config - The config object\n * @param {VueInstance} instance - The current Vue instance\n * @param {ComputedRef<object>} nestedExternalResults - The external results for this nested collection\n * @return {Object<string, VuelidateState>}\n */\nfunction collectNestedValidationResults (validations, nestedState, path, resultsCache, config, instance, nestedExternalResults) {\n  const nestedValidationKeys = Object.keys(validations)\n\n  // if we have no state, return empty object\n  if (!nestedValidationKeys.length) return {}\n\n  return nestedValidationKeys.reduce((results, nestedKey) => {\n    // build validation results for nested state\n    results[nestedKey] = setValidations({\n      validations: validations[nestedKey],\n      state: nestedState,\n      key: nestedKey,\n      parentKey: path,\n      resultsCache,\n      globalConfig: config,\n      instance,\n      externalResults: nestedExternalResults\n    })\n    return results\n  }, {})\n}\n\n/**\n * Generates the Meta fields from the results\n * @param {ValidationResult|{}} results\n * @param {Object.<string, VuelidateState>} nestedResults\n * @param {Object.<string, ValidationResult>} childResults\n * @return {{$anyDirty: Ref<Boolean>, $error: Ref<Boolean>, $invalid: Ref<Boolean>, $errors: Ref<ErrorObject[]>, $dirty: Ref<Boolean>, $touch: Function, $reset: Function }}\n */\nfunction createMetaFields (results, nestedResults, childResults) {\n  const allResults = computed(() => [nestedResults, childResults]\n    .filter(res => res)\n    .reduce((allRes, res) => {\n      return allRes.concat(Object.values(unwrap(res)))\n    }, [])\n  )\n\n  // returns `$dirty` as true, if all children are dirty\n  const $dirty = computed({\n    get () {\n      return results.$dirty.value ||\n        (allResults.value.length ? allResults.value.every(r => r.$dirty) : false)\n    },\n    set (v) {\n      results.$dirty.value = v\n    }\n  })\n\n  const $silentErrors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unwrap(results.$silentErrors) || []\n\n    // collect all nested and child $silentErrors\n    const nestedErrors = allResults.value\n      .filter(result => (unwrap(result).$silentErrors || []).length)\n      .reduce((errors, result) => {\n        return errors.concat(...result.$silentErrors)\n      }, [])\n\n    // merge the $silentErrors\n    return modelErrors.concat(nestedErrors)\n  })\n\n  const $errors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unwrap(results.$errors) || []\n\n    // collect all nested and child $errors\n    const nestedErrors = allResults.value\n      .filter(result => (unwrap(result).$errors || []).length)\n      .reduce((errors, result) => {\n        return errors.concat(...result.$errors)\n      }, [])\n\n    // merge the $errors\n    return modelErrors.concat(nestedErrors)\n  })\n\n  const $invalid = computed(() =>\n    // if any of the nested values is invalid\n    allResults.value.some(r => r.$invalid) ||\n    // or if the current state is invalid\n    unwrap(results.$invalid) ||\n    // fallback to false if is root\n    false\n  )\n\n  const $pending = computed(() =>\n    // if any of the nested values is pending\n    allResults.value.some(r => unwrap(r.$pending)) ||\n    // if any of the current state validators is pending\n    unwrap(results.$pending) ||\n    // fallback to false if is root\n    false\n  )\n\n  const $anyDirty = computed(() =>\n    allResults.value.some(r => r.$dirty) ||\n    allResults.value.some(r => r.$anyDirty) ||\n    $dirty.value\n  )\n\n  const $error = computed(() => $dirty.value ? $pending.value || $invalid.value : false)\n\n  const $touch = () => {\n    // call the root $touch\n    results.$touch()\n    // call all nested level $touch\n    allResults.value.forEach((result) => {\n      result.$touch()\n    })\n  }\n\n  const $commit = () => {\n    // call the root $touch\n    results.$commit()\n    // call all nested level $touch\n    allResults.value.forEach((result) => {\n      result.$commit()\n    })\n  }\n\n  const $reset = () => {\n    // reset the root $dirty state\n    results.$reset()\n    // reset all the children $dirty states\n    allResults.value.forEach((result) => {\n      result.$reset()\n    })\n  }\n\n  // Ensure that if all child and nested results are $dirty, this also becomes $dirty\n  if (allResults.value.length && allResults.value.every(nr => nr.$dirty)) $touch()\n\n  return {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  }\n}\n\n/**\n * @typedef VuelidateState\n * @property {WritableComputedRef<any>} $model\n * @property {ComputedRef<Boolean>} $dirty\n * @property {ComputedRef<Boolean>} $error\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<Boolean>} $invalid\n * @property {ComputedRef<Boolean>} $anyDirty\n * @property {ComputedRef<Boolean>} $pending\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {String} $path\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} [$validate]\n * @property {Function} [$getResultsForChild]\n * @property {Object.<string, VuelidateState>}\n */\n\n/**\n * Main Vuelidate bootstrap function.\n * Used both for Composition API in `setup` and for Global App usage.\n * Used to collect validation state, when walking recursively down the state tree\n * @param {Object} params\n * @param {Object<NormalizedValidator|Function>} params.validations\n * @param {Object} params.state\n * @param {String} [params.key] - Current state property key. Used when being called on nested items\n * @param {String} [params.parentKey] - Parent state property key. Used when being called recursively\n * @param {Object<string, ValidationResult>} [params.childResults] - Used to collect child results.\n * @param {ResultsStorage} params.resultsCache - The cached validation results\n * @param {VueInstance} params.instance - The current Vue instance\n * @param {GlobalConfig} params.globalConfig - The validation config, passed to this setValidations instance.\n * @param {UnwrapNestedRefs<object> | Ref<Object>} params.externalResults - External validation results\n * @return {UnwrapNestedRefs<VuelidateState>}\n */\nexport function setValidations ({\n  validations,\n  state,\n  key,\n  parentKey,\n  childResults,\n  resultsCache,\n  globalConfig = {},\n  instance,\n  externalResults\n}) {\n  const path = parentKey ? `${parentKey}.${key}` : key\n\n  // Sort out the validation object into:\n  // – rules = validators for current state tree fragment\n  // — nestedValidators = nested state fragments keys that might contain more validators\n  // – config = configuration properties that affect this state fragment\n  const { rules, nestedValidators, config, validationGroups } = sortValidations(validations)\n  const mergedConfig = { ...globalConfig, ...config }\n\n  // create protected state for cases when the state branch does not exist yet.\n  // This protects when using the OptionsAPI as the data is bound after the setup method\n  const nestedState = key\n    ? computed(() => {\n      const s = unwrap(state)\n      return s ? unwrap(s[key]) : undefined\n    })\n    : state\n\n  // cache the external results, so we can revert back to them\n  const cachedExternalResults = { ...(unwrap(externalResults) || {}) }\n\n  const nestedExternalResults = computed(() => {\n    const results = unwrap(externalResults)\n    if (!key) return results\n    return results ? unwrap(results[key]) : undefined\n  })\n\n  // Use rules for the current state fragment and validate it\n  const results = createValidationResults(rules, nestedState, key, resultsCache, path, mergedConfig, instance, nestedExternalResults, state)\n  // Use nested keys to repeat the process\n  // *WARN*: This is recursive\n  const nestedResults = collectNestedValidationResults(nestedValidators, nestedState, path, resultsCache, mergedConfig, instance, nestedExternalResults)\n\n  const $validationGroups = {}\n  if (validationGroups) {\n    Object.entries(validationGroups).forEach(([key, group]) => {\n      $validationGroups[key] = {\n        $invalid: gatherBooleanGroupProperties(group, nestedResults, '$invalid'),\n        $error: gatherBooleanGroupProperties(group, nestedResults, '$error'),\n        $pending: gatherBooleanGroupProperties(group, nestedResults, '$pending'),\n        $errors: gatherArrayGroupProperties(group, nestedResults, '$errors'),\n        $silentErrors: gatherArrayGroupProperties(group, nestedResults, '$silentErrors')\n      }\n    })\n  }\n\n  // Collect and merge this level validation results\n  // with all nested validation results\n  const {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  } = createMetaFields(results, nestedResults, childResults)\n\n  /**\n   * If we have no `key`, this is the top level state\n   * We dont need `$model` there.\n   */\n  const $model = key\n    ? computed({\n      get: () => unwrap(nestedState),\n      set: val => {\n        $dirty.value = true\n        const s = unwrap(state)\n        const external = unwrap(externalResults)\n        if (external) {\n          external[key] = cachedExternalResults[key]\n        }\n        if (isRef(s[key])) {\n          s[key].value = val\n        } else {\n          s[key] = val\n        }\n      }\n    })\n    : null\n\n  if (key && mergedConfig.$autoDirty) {\n    watch(nestedState, () => {\n      if (!$dirty.value) $touch()\n      const external = unwrap(externalResults)\n      if (external) {\n        external[key] = cachedExternalResults[key]\n      }\n    }, { flush: 'sync' })\n  }\n\n  /**\n   * Executes the validators and returns the result.\n   * @return {Promise<boolean>}\n   */\n  async function $validate () {\n    $touch()\n    if (mergedConfig.$rewardEarly) {\n      $commit()\n      // await the watchers\n      await nextTick()\n    }\n    // await the watchers\n    await nextTick()\n    return new Promise((resolve) => {\n      // return whether it is valid or not\n      if (!$pending.value) return resolve(!$invalid.value)\n      const unwatch = watch($pending, () => {\n        resolve(!$invalid.value)\n        unwatch()\n      })\n    })\n  }\n\n  /**\n   * Returns a child component's results, based on registration name\n   * @param {string} key\n   * @return {VuelidateState}\n   */\n  function $getResultsForChild (key) {\n    return (childResults.value || {})[key]\n  }\n\n  function $clearExternalResults () {\n    if (isRef(externalResults)) {\n      externalResults.value = cachedExternalResults\n    } else {\n      // if the external results state was empty, we need to delete every property, one by one\n      if (Object.keys(cachedExternalResults).length === 0) {\n        Object.keys(externalResults).forEach((k) => {\n          delete externalResults[k]\n        })\n      } else {\n        // state was not empty, so we just assign it back into the current state\n        Object.assign(externalResults, cachedExternalResults)\n      }\n    }\n  }\n\n  return reactive({\n    ...results,\n    // NOTE: The order here is very important, since we want to override\n    // some of the *results* meta fields with the collective version of it\n    // that includes the results of nested state validation results\n    $model,\n    $dirty,\n    $error,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $pending,\n    $touch,\n    $reset,\n    $path: path || ROOT_PATH,\n    $silentErrors,\n    $validate,\n    $commit,\n    // if there are no child results, we are inside a nested property\n    ...(childResults && {\n      $getResultsForChild,\n      $clearExternalResults,\n      $validationGroups\n    }),\n    // add each nested property's state\n    ...nestedResults\n  })\n}\n","import { isFunction, unwrap } from '../utils'\n\n/**\n * Sorts a validation definition into rules, configs and nested validators.\n * @param {Object<NormalizedValidator|Function>} validationsRaw\n * @return {{ rules: Object<NormalizedValidator>, nestedValidators: Object, config: GlobalConfig }}\n */\nexport function sortValidations (validationsRaw = {}) {\n  const validations = unwrap(validationsRaw)\n  const validationKeys = Object.keys(validations)\n\n  const rules = {}\n  const nestedValidators = {}\n  const config = {}\n  let validationGroups = null\n\n  validationKeys.forEach(key => {\n    const v = validations[key]\n\n    switch (true) {\n      // If it is already normalized, use it\n      case isFunction(v.$validator):\n        rules[key] = v\n        break\n      // If it is just a function, normalize it first\n      // into { $validator: <Fun> }\n      case isFunction(v):\n        rules[key] = { $validator: v }\n        break\n      case key === '$validationGroups':\n        validationGroups = v\n        break\n      // Catch $-prefixed properties as config\n      case key.startsWith('$'):\n        config[key] = v\n        break\n      // If it doesn’t match any of the above,\n      // treat as nestedValidators state property\n      default:\n        nestedValidators[key] = v\n    }\n  })\n\n  return { rules, nestedValidators, config, validationGroups }\n}\n","import { unwrap } from './utils'\n\nexport default class ResultsStorage {\n  constructor () {\n    this.storage = new Map()\n  }\n\n  /**\n   * Stores a validation result, and its rules by its path\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {ValidationResult} result\n   */\n  set (path, rules, result) {\n    this.storage.set(path, { rules, result })\n  }\n\n  /**\n   * Check if the stored `results` for the provided `path` have the same `rules` compared to 'storedRules'\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {Object<NormalizedValidator>} storedRules\n   * @return {Boolean}\n   */\n  checkRulesValidity (path, rules, storedRules) {\n    const storedRulesKeys = Object.keys(storedRules)\n    const newRulesKeys = Object.keys(rules)\n\n    if (newRulesKeys.length !== storedRulesKeys.length) return false\n\n    const hasAllValidators = newRulesKeys.every(ruleKey => storedRulesKeys.includes(ruleKey))\n    if (!hasAllValidators) return false\n\n    return newRulesKeys.every(ruleKey => {\n      if (!rules[ruleKey].$params) return true\n      return Object.keys(rules[ruleKey].$params)\n        .every(paramKey => {\n          // make sure to unwrap before comparing\n          return unwrap(storedRules[ruleKey].$params[paramKey]) === unwrap(rules[ruleKey].$params[paramKey])\n        })\n    })\n  }\n\n  /**\n   * Returns the matched result if catche is valid\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @return {{$partial: boolean, $dirty: Ref<Boolean>, $unwatch: function}|undefined|ValidationResult}\n   */\n  get (path, rules) {\n    const storedRuleResultPair = this.storage.get(path)\n    if (!storedRuleResultPair) return undefined\n    const { rules: storedRules, result } = storedRuleResultPair\n\n    const isValidCache = this.checkRulesValidity(path, rules, storedRules)\n\n    const $unwatch = result.$unwatch ? result.$unwatch : () => ({})\n\n    if (!isValidCache) return { $dirty: result.$dirty, $partial: true, $unwatch }\n    return result\n  }\n}\n","import { computed, inject, provide, ref } from 'vue-demi'\nimport { unwrap } from './index'\n\nexport const CollectFlag = {\n  COLLECT_ALL: true,\n  COLLECT_NONE: false\n}\n\nconst VuelidateInjectChildResults = Symbol('vuelidate#injectChildResults')\nconst VuelidateRemoveChildResults = Symbol('vuelidate#removeChildResults')\n\n/**\n * Create helpers to collect validation state from child components\n * @param {Object} params\n * @param {String | Number | Boolean} params.$scope - Parent component scope\n * @return {{sendValidationResultsToParent: function[], childResults: ComputedRef<Object>, removeValidationResultsFromParent: function[]}}\n */\nexport function nestedValidations ({ $scope, instance }) {\n  const childResultsRaw = {}\n  const childResultsKeys = ref([])\n  const childResults = computed(() => childResultsKeys.value.reduce((results, key) => {\n    results[key] = unwrap(childResultsRaw[key])\n    return results\n  }, {}))\n\n  /**\n   * Allows children to send validation data up to their parent.\n   * @param {Object} results - the results\n   * @param {Object} args\n   * @param {String} args.$registerAs - the $registeredAs key\n   * @param {String | Number | Boolean} args.$scope - the $scope key\n   */\n  function injectChildResultsIntoParent (results, { $registerAs: key, $scope: childScope, $stopPropagation }) {\n    if (\n      $stopPropagation ||\n      $scope === CollectFlag.COLLECT_NONE ||\n      childScope === CollectFlag.COLLECT_NONE ||\n      (\n        $scope !== CollectFlag.COLLECT_ALL &&\n        $scope !== childScope\n      )\n    ) return\n    childResultsRaw[key] = results\n    childResultsKeys.value.push(key)\n  }\n\n  // combine with other `injectChildResultsIntoParent` from vuelidate instances in this Vue component instance\n  instance.__vuelidateInjectInstances = [].concat(instance.__vuelidateInjectInstances || [], injectChildResultsIntoParent)\n\n  /**\n   * Allows children to remove the validation data from their parent, before getting destroyed.\n   * @param {String} key - the registeredAs key\n   */\n  function removeChildResultsFromParent (key) {\n    // remove the key\n    childResultsKeys.value = childResultsKeys.value.filter(childKey => childKey !== key)\n    // remove the stored data for the key\n    delete childResultsRaw[key]\n  }\n\n  // combine with other `removeChildResultsFromParent` from vuelidate instances in this Vue component instance\n  instance.__vuelidateRemoveInstances = [].concat(instance.__vuelidateRemoveInstances || [], removeChildResultsFromParent)\n\n  // inject the `injectChildResultsIntoParent` method, into the current scope\n  const sendValidationResultsToParent = inject(VuelidateInjectChildResults, [])\n  // provide to all of its children the send results to parent function\n  provide(VuelidateInjectChildResults, instance.__vuelidateInjectInstances)\n\n  const removeValidationResultsFromParent = inject(VuelidateRemoveChildResults, [])\n  // provide to all of its children the remove results  function\n  provide(VuelidateRemoveChildResults, instance.__vuelidateRemoveInstances)\n\n  return { childResults, sendValidationResultsToParent, removeValidationResultsFromParent }\n}\n","import { computed } from 'vue-demi'\n\n/**\n * Helper proxy for instance property access. It makes every reference\n * reactive for the validation function\n * @param target\n * @return {*|ComputedRef<*>}\n */\nexport function ComputedProxyFactory (target) {\n  return new Proxy(target, {\n    get (target, prop) {\n      return (typeof target[prop] === 'object')\n        ? ComputedProxyFactory(target[prop])\n        : computed(() => target[prop])\n    }\n  })\n}\n","import { watch, computed, getCurrentInstance, onBeforeMount, onBeforeUnmount, isRef, ref, reactive } from 'vue-demi'\nimport { isFunction, unwrap, isProxy } from './utils'\nimport { setValidations } from './core'\nimport ResultsStorage from './storage'\nimport { CollectFlag, nestedValidations } from './utils/injectNestedComponentValidations'\nimport { ComputedProxyFactory } from './utils/ComputedProxyFactory'\n\n/**\n * @typedef GlobalConfig\n * @property {String} [$registerAs] - Config Object\n * @property {String | Number | Symbol} [$scope] - A scope to limit child component registration\n * @property {Boolean} [$stopPropagation] - Tells a Vue component to stop sending its results up to the parent\n * @property {Ref<Object>} [$externalResults] - External error messages, like from server validation.\n * @property {Boolean} [$autoDirty] - Should the form watch for state changed, and automatically set `$dirty` to true.\n * @property {Boolean} [$lazy] - Should the validations be lazy, and run only after they are dirty\n * @property {Boolean} [$rewardEarly] - Once valid, re-runs property validators only on manual calls of $commit\n */\n\n/**\n * Composition API compatible Vuelidate\n * Use inside the `setup` lifecycle hook\n * @param {Object | GlobalConfig} [validations] - Validations Object or the globalConfig.\n * @param {Object} [state] - State object - required if `validations` is a validation object.\n * @param {GlobalConfig} [globalConfig] - Config Object\n * @return {ComputedRef<*>}\n */\nexport function useVuelidate (validations, state, globalConfig = {}) {\n  // if we pass only one argument, its most probably the globalConfig.\n  // This use case is so parents can just collect results of child forms.\n  if (arguments.length === 1) {\n    globalConfig = validations\n    validations = undefined\n    state = undefined\n  }\n  let { $registerAs, $scope = CollectFlag.COLLECT_ALL, $stopPropagation, $externalResults, currentVueInstance } = globalConfig\n\n  const instance = currentVueInstance || getCurrentInstance()?.proxy\n\n  const componentOptions = instance\n    ? instance.$options\n    : {}\n  // if there is no registration name, add one.\n  if (!$registerAs && instance) {\n    // NOTE:\n    // ._uid // Vue 2.x Composition-API plugin\n    // .uid // Vue 3.0\n    const uid = instance.uid || instance._uid\n    $registerAs = `_vuelidate_${uid}`\n  }\n  const validationResults = ref({})\n  const resultsCache = new ResultsStorage()\n\n  const {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  } = instance\n    ? nestedValidations({ $scope, instance })\n    : { childResults: ref({}) }\n\n  // Options API\n  if (!validations && componentOptions.validations) {\n    const rules = componentOptions.validations\n\n    state = ref({})\n    onBeforeMount(() => {\n      // Delay binding state to validations defined with the Options API until mounting, when the data\n      // has been attached to the component instance. From that point on it will be reactive.\n      state.value = instance\n\n      watch(() => isFunction(rules) ? rules.call(state.value, new ComputedProxyFactory(state.value)) : rules,\n        (validations) => {\n          validationResults.value = setValidations({\n            validations,\n            state,\n            childResults,\n            resultsCache,\n            globalConfig,\n            instance,\n            externalResults: $externalResults || instance.vuelidateExternalResults\n          })\n        }, { immediate: true })\n    })\n\n    globalConfig = componentOptions.validationsConfig || globalConfig\n  } else {\n    const validationsWatchTarget = isRef(validations) || isProxy(validations)\n      ? validations\n      // wrap plain objects in a reactive, so we can track changes if they have computed in them.\n      : reactive(validations || {})\n\n    watch(validationsWatchTarget, (newValidationRules) => {\n      validationResults.value = setValidations({\n        validations: newValidationRules,\n        state,\n        childResults,\n        resultsCache,\n        globalConfig,\n        instance: instance ?? {},\n        externalResults: $externalResults\n      })\n    }, { immediate: true })\n  }\n\n  if (instance) {\n    // send all the data to the parent when the function is invoked inside setup.\n    sendValidationResultsToParent.forEach((f) => f(validationResults, { $registerAs, $scope, $stopPropagation }))\n    // before this component is destroyed, remove all the data from the parent.\n    onBeforeUnmount(() => removeValidationResultsFromParent.forEach((f) => f($registerAs)))\n  }\n\n  return computed(() => {\n    return {\n      ...unwrap(validationResults.value),\n      ...childResults.value\n    }\n  })\n}\n\nexport { CollectFlag }\nexport default useVuelidate\n"],"names":["unwrapObj","obj","ignoreKeys","Object","keys","reduce","o","k","includes","unwrap","isFunction","val","isProxy","value","isReactive","isReadonly","get","stringPath","def","current","path","split","i","length","gatherBooleanGroupProperties","group","nestedResults","property","computed","some","gatherArrayGroupProperties","all","fetchedProperty","concat","callRule","rule","siblingState","instance","call","normalizeValidatorResponse","result","undefined","$valid","createValidatorResult","model","$dirty","config","validatorName","propertyKey","propertyPath","$lastInvalidState","$lastCommittedOn","$pending","ref","$params","$response","$invalid","$unwatch","$async","$lazy","$rewardEarly","watchTargets","$pendingCounter","watch","ruleResult","err","Promise","reject","resolve","then","data","catch","error","immediate","deep","createAsyncResult","$validator","$watchTargets","returnValue","createSyncResult","message","$message","$model","$propertyPath","$property","_empty","body","direct","e","setValidations","$validate","f","$touch","mergedConfig","$commit","_call","nextTick","unwatch","args","arguments","apply","this","validations","state","key","parentKey","childResults","resultsCache","globalConfig","externalResults","rules","nestedValidators","validationGroups","validationsRaw","validationKeys","forEach","v","startsWith","sortValidations","nestedState","s","cachedExternalResults","nestedExternalResults","results","ruleKeys","cachedResult","$partial","$path","$reset","ruleKey","$externalResults","map","stringError","index","$uid","r","$error","$silentErrors","filter","res","reactive","$errors","Date","now","set","createValidationResults","nestedValidationKeys","nestedKey","collectNestedValidationResults","$validationGroups","entries","_ref2","$anyDirty","allResults","allRes","values","every","modelErrors","nestedErrors","errors","nr","createMetaFields","external","isRef","$autoDirty","flush","$getResultsForChild","$clearExternalResults","assign","ResultsStorage","constructor","storage","Map","checkRulesValidity","storedRules","storedRulesKeys","newRulesKeys","paramKey","storedRuleResultPair","isValidCache","CollectFlag","COLLECT_ALL","COLLECT_NONE","VuelidateInjectChildResults","Symbol","VuelidateRemoveChildResults","nestedValidations","$scope","childResultsRaw","childResultsKeys","__vuelidateInjectInstances","$registerAs","childScope","$stopPropagation","push","__vuelidateRemoveInstances","childKey","sendValidationResultsToParent","inject","provide","removeValidationResultsFromParent","ComputedProxyFactory","target","Proxy","prop","useVuelidate","currentVueInstance","getCurrentInstance","_getCurrentInstance","proxy","componentOptions","$options","uid","_uid","validationResults","onBeforeMount","vuelidateExternalResults","validationsConfig","validationsWatchTarget","newValidationRules","onBeforeUnmount"],"mappings":"yCAIO,SAASA,EAAWC,OAAKC,yDAAa,UACpCC,OAAOC,KAAKH,GAAKI,OAAO,CAACC,EAAGC,KAC7BL,EAAWM,SAASD,KACxBD,EAAEC,GAAKE,QAAOR,EAAIM,KADiBD,GAGlC,IAGE,SAASI,EAAYC,SACJ,mBAARA,EAqBT,SAASC,EAASC,UAChBC,aAAWD,IAAUE,aAAWF,GAGlC,SAASG,EAAKf,EAAKgB,EAAYC,OAEhCC,EAAUlB,QACRmB,EAAOH,EAAWI,MAAM,SAEzB,IAAIC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAK,KAE/BH,EAAQC,EAAKE,IAAK,OAAOJ,EAG9BC,EAAUA,EAAQC,EAAKE,WAGlBH,EAGF,SAASK,EAA8BC,EAAOC,EAAeC,UAC3DC,WAAS,IACPH,EAAMI,KAAMT,GACVJ,EAAIU,EAAeN,EAAM,EAAGO,IAAW,IAASA,KAKtD,SAASG,EAA4BL,EAAOC,EAAeC,UACzDC,WAAS,IACPH,EAAMpB,OAAO,CAAC0B,EAAKX,WAClBY,EAAkBhB,EAAIU,EAAeN,EAAM,EAAGO,IAAW,IAASA,IAAa,UAC9EI,EAAIE,OAAOD,IACjB,KClDP,SAASE,EAAUC,EAAMtB,EAAOuB,EAAcC,UACrCF,EAAKG,KAAKD,EAAU5B,QAAOI,GAAQJ,QAAO2B,GAAeC,GASlE,SAASE,EAA4BC,eACVC,IAAlBD,EAAOE,QACTF,EAAOE,QACPF,EAkJA,SAASG,EACdR,EACAS,EACAC,EACAC,EACAT,EACAU,EACAC,EACAC,EACAb,EACAc,EACAC,SAEMC,EAAWC,OAAI,GACfC,EAAUnB,EAAKmB,SAAW,GAC1BC,EAAYF,MAAI,UAClBG,EACAC,EAEAtB,EAAKuB,SACJF,SAAAA,EAAUC,SAAAA,GAnJjB,SACEtB,EACAS,EACAQ,EACAP,IAKAU,EACAlB,OALAsB,MACEA,EADFC,aAEEA,KAIFC,yDAAe,GACfzB,yCACAc,yCACAC,iDAEMK,EAAWH,QAAMR,EAAOhC,OACxBiD,EAAkBT,MAAI,GAE5BD,EAASvC,OAAQ,QAEX4C,EAAWM,QACf,CAACnB,EAAOC,GAAQZ,OAAO4B,EAAcV,GACrC,QAGKQ,IAAUd,EAAOhC,OAEjB+C,IAAiBV,EAAkBrC,QAAUuC,EAASvC,iBAIrDmD,MAGFA,EAAa9B,EAASC,EAAMS,EAAOR,EAAcC,GACjD,MAAO4B,GAEPD,EAAaE,QAAQC,OAAOF,GAG9BH,EAAgBjD,QAChBuC,EAASvC,QAAUiD,EAAgBjD,MAEnC2C,EAAS3C,OAAQ,EAEjBqD,QAAQE,QAAQJ,GACbK,KAAKC,IACJR,EAAgBjD,QAChBuC,EAASvC,QAAUiD,EAAgBjD,MACnC0C,EAAU1C,MAAQyD,EAClBd,EAAS3C,MAAQ0B,EAA2B+B,KAE7CC,MAAOC,IACNV,EAAgBjD,QAChBuC,EAASvC,QAAUiD,EAAgBjD,MACnC0C,EAAU1C,MAAQ2D,EAClBhB,EAAS3C,OAAQ,KAEpB,CAAE4D,WAAW,EAAMC,KAAuB,iBAAV9B,UAG9B,CAAEY,SAAAA,EAAUC,SAAAA,GAqFSkB,CACxBxC,EAAKyC,WACLhC,EACAQ,EACAP,EACAC,EACAS,EACAlB,EACAF,EAAK0C,cACLzC,EACAc,EACAC,MAGCK,SAAAA,EAAUC,SAAAA,GAnFjB,SACEtB,EACAS,EACAC,IAEAU,EACAlB,EACAD,EACAc,OAJAS,MAAEA,EAAFC,aAASA,WA0BF,CAAEH,SApBQ,SAoBED,SAnBF5B,WAAS,QAGrB+B,IAAUd,EAAOhC,OAGjB+C,IAAiBV,EAAkBrC,aAC7B,MAELiE,GAAc,YAEVtC,EAASN,EAASC,EAAMS,EAAOR,EAAcC,GACnDkB,EAAU1C,MAAQ2B,EAClBsC,EAAcvC,EAA2BC,GACzC,MAAOyB,GACPV,EAAU1C,MAAQoD,SAEba,KAuDmBC,CACxB5C,EAAKyC,WACLhC,EACAC,EACAC,EACAS,EACAlB,EACAD,EACAc,UAIE8B,EAAU7C,EAAK8C,eAiBd,CACLA,SAjBevE,EAAWsE,GACxBpD,WAAS,IACToD,EACEhF,EAAU,CACRoD,SAAAA,EACAI,SAAAA,EACAF,QAAStD,EAAUsD,GACnB4B,OAAQtC,EACRW,UAAAA,EACAqB,WAAY7B,EACZoC,cAAelC,EACfmC,UAAWpC,MAGfgC,GAAW,GAIb1B,QAAAA,EACAF,SAAAA,EACAI,SAAAA,EACAD,UAAAA,EACAE,SAAAA,GC2WG,SAAS4B,KAjFT,WAAeC,EAAMjB,EAAMkB,MAC7BA,SACIlB,EAAOA,EAAKiB,KAAUA,YAGzB9C,EAAS0B,QAAQE,QAAQkB,YACtBjB,EAAO7B,EAAO6B,KAAKA,GAAQ7B,EACjC,MAAOgD,UACDtB,QAAQC,OAAOqB,IAvJjB,SAASC,WA6GCC,GAvaMC,oBAwanBC,IAmDG,SAAiBN,EAAMjB,OACzB7B,EAAS8C,WACT9C,GAAUA,EAAO6B,KACb7B,EAAO6B,KAAKA,GAEbA,EAAK7B,mBAvDLqD,EAAajC,oBACfkC,IA6CEC,EA3CIC,aA2CgBT,GADrB,IAA4BA,yBAvCzBS,8BACC,IAAI9B,QAASE,QAEbhB,EAASvC,MAAO,OAAOuD,GAASZ,EAAS3C,aACxCoF,EAAUlC,QAAMX,EAAU,KAC9BgB,GAASZ,EAAS3C,OAClBoF,eApbA,eACD,IAAIC,EAAO,GAAI5E,EAAI,EAAGA,EAAI6E,UAAU5E,OAAQD,IAChD4E,EAAK5E,GAAK6E,UAAU7E,cAGb4C,QAAQE,QAAQuB,EAAES,MAAMC,KAAMH,IACpC,MAAMV,UACAtB,QAAQC,OAAOqB,MARlB,IAAgBG,MA0TSW,YAC9BA,EAD8BC,MAE9BA,EAF8BC,IAG9BA,EAH8BC,UAI9BA,EAJ8BC,aAK9BA,EAL8BC,aAM9BA,EAN8BC,aAO9BA,EAAe,GAPevE,SAQ9BA,EAR8BwE,gBAS9BA,WAEMzF,EAAOqF,EAAa,GAAEA,KAAaD,IAAQA,GAM3CM,MAAEA,EAAFC,iBAASA,EAATjE,OAA2BA,EAA3BkE,iBAAmCA,GC1YpC,eAA0BC,yDAAiB,SAC1CX,EAAc7F,QAAOwG,GACrBC,EAAiB/G,OAAOC,KAAKkG,GAE7BQ,EAAQ,GACRC,EAAmB,GACnBjE,EAAS,OACXkE,EAAmB,YAEvBE,EAAeC,QAAQX,UACfY,EAAId,EAAYE,WAEd,QAED9F,EAAW0G,EAAExC,YAChBkC,EAAMN,GAAOY,aAIV1G,EAAW0G,GACdN,EAAMN,GAAO,CAAE5B,WAAYwC,aAEhB,sBAARZ,EACHQ,EAAmBI,aAGhBZ,EAAIa,WAAW,KAClBvE,EAAO0D,GAAOY,gBAKdL,EAAiBP,GAAOY,KAIvB,CAAEN,MAAAA,EAAOC,iBAAAA,EAAkBjE,OAAAA,EAAQkE,iBAAAA,GDsWoBM,CAAgBhB,GACxET,mBAAoBe,EAAiB9D,GAIrCyE,EAAcf,EAChB5E,WAAS,WACH4F,EAAI/G,QAAO8F,UACViB,EAAI/G,QAAO+G,EAAEhB,SAAQ/D,IAE5B8D,EAGEkB,mBAA8BhH,QAAOoG,IAAoB,IAEzDa,EAAwB9F,WAAS,WAC/B+F,EAAUlH,QAAOoG,UAClBL,EACEmB,EAAUlH,QAAOkH,EAAQnB,SAAQ/D,EADvBkF,IAKbA,EAnWR,SAAkCb,EAAOlE,EAAO4D,EAAKG,EAAcvF,EAAM0B,EAAQT,EAAUwE,EAAiBzE,SAEpGwF,EAAWzH,OAAOC,KAAK0G,GAEvBe,EAAelB,EAAa3F,IAAII,EAAM0F,GACtCjE,EAASQ,OAAI,GAGbH,EAAoBG,OAAI,GAExBF,EAAmBE,MAAI,MAEzBwE,EAAc,KAEXA,EAAaC,SAAU,OAAOD,EAEnCA,EAAapE,WAEbZ,EAAOhC,MAAQgH,EAAahF,OAAOhC,YAG/B2B,EAAS,CAEbK,OAAAA,EACAkF,MAAO3G,EACPwE,OAAQ,KAAa/C,EAAOhC,QAAOgC,EAAOhC,OAAQ,IAClDmH,OAAQ,KAAYnF,EAAOhC,QAAOgC,EAAOhC,OAAQ,IACjDiF,QAAS,eAON8B,EAASrG,QAOdqG,EAAST,QAAQc,IACfzF,EAAOyF,GAAWtF,EAChBmE,EAAMmB,GACNrF,EACAJ,EAAOK,OACPC,EACAT,EACA4F,EACAzB,EACApF,EACAgB,EACAc,EACAC,KAIJX,EAAO0F,iBAAmBtG,WAAS,IAC5BiF,EAAgBhG,MACd,GAAGoB,OAAO4E,EAAgBhG,OAAOsH,IAAI,CAACC,EAAaC,MACxDlD,cAAe/D,EACfgE,UAAWoB,EACX5B,WAAY,mBACZ0D,KAAO,GAAElH,oBAAuBiH,IAChCpD,SAAUmD,EACV9E,QAAS,GACTC,UAAW,KACXH,UAAU,KATuB,IAarCZ,EAAOgB,SAAW5B,WAAS,WACnB2G,EAAIX,EAAS/F,KAAKoG,GAAWxH,QAAO+B,EAAOyF,GAASzE,kBAE1DN,EAAkBrC,MAAQ0H,IACjB/F,EAAO0F,iBAAiBrH,MAAMU,QAAUgH,IAGnD/F,EAAOY,SAAWxB,WAAS,IACzBgG,EAAS/F,KAAKoG,GAAWxH,QAAO+B,EAAOyF,GAAS7E,YAGlDZ,EAAOgG,OAAS5G,WAAS,MACvBY,EAAOK,OAAOhC,QAAQ2B,EAAOY,SAASvC,OAAS2B,EAAOgB,SAAS3C,QAGjE2B,EAAOiG,cAAgB7G,WAAS,IAAMgG,EACnCc,OAAOT,GAAWxH,QAAO+B,EAAOyF,GAASzE,WACzC2E,IAAIF,UACGU,EAAMnG,EAAOyF,UACZW,WAAS,CACdzD,cAAe/D,EACfgE,UAAWoB,EACX5B,WAAYqD,EACZK,KAAO,GAAElH,KAAQ6G,IACjBhD,SAAU0D,EAAI1D,SACd3B,QAASqF,EAAIrF,QACbC,UAAWoF,EAAIpF,UACfH,SAAUuF,EAAIvF,aAGjBnB,OAAOO,EAAO0F,iBAAiBrH,QAGlC2B,EAAOqG,QAAUjH,WAAS,IAAMY,EAAOK,OAAOhC,MAC1C2B,EAAOiG,cAAc5H,MACrB,IAGJ2B,EAAOiB,SAAW,IAAMmE,EAAST,QAAQc,IACvCzF,EAAOyF,GAASxE,aAGlBjB,EAAOsD,QAAU,KACf5C,EAAkBrC,OAAQ,EAC1BsC,EAAiBtC,MAAQiI,KAAKC,OAGhCpC,EAAaqC,IAAI5H,EAAM0F,EAAOtE,GAEvBA,IApFLqF,GAAgBlB,EAAaqC,IAAI5H,EAAM0F,EAAOtE,GAEvCA,GA6TOyG,CAAwBnC,EAAOS,EAAaf,EAAKG,EAAcvF,EAAMyE,EAAcxD,EAAUqF,EAAuBnB,GAG9H7E,EAhOR,SAAyC4E,EAAaiB,EAAanG,EAAMuF,EAAc7D,EAAQT,EAAUqF,SACjGwB,EAAuB/I,OAAOC,KAAKkG,UAGpC4C,EAAqB3H,OAEnB2H,EAAqB7I,OAAO,CAACsH,EAASwB,KAE3CxB,EAAQwB,GAAa1D,EAAe,CAClCa,YAAaA,EAAY6C,GACzB5C,MAAOgB,EACPf,IAAK2C,EACL1C,UAAWrF,EACXuF,aAAAA,EACAC,aAAc9D,EACdT,SAAAA,EACAwE,gBAAiBa,IAEZC,GACN,IAfsC,GA4NnByB,CAA+BrC,EAAkBQ,EAAanG,EAAMuF,EAAcd,EAAcxD,EAAUqF,GAE1H2B,EAAoB,GACtBrC,GACF7G,OAAOmJ,QAAQtC,GAAkBG,QAAQoC,QAAE/C,EAAK/E,KAC9C4H,EAAkB7C,GAAO,CACvBhD,SAAUhC,EAA6BC,EAAOC,EAAe,YAC7D8G,OAAQhH,EAA6BC,EAAOC,EAAe,UAC3D0B,SAAU5B,EAA6BC,EAAOC,EAAe,YAC7DmH,QAAS/G,EAA2BL,EAAOC,EAAe,WAC1D+G,cAAe3G,EAA2BL,EAAOC,EAAe,0BAOhEmB,OACJA,EADIgG,QAEJA,EAFIrF,SAGJA,EAHIgG,UAIJA,EAJIhB,OAKJA,EALIpF,SAMJA,EANIwC,OAOJA,EAPIoC,OAQJA,EARIS,cASJA,EATI3C,QAUJA,GA9NJ,SAA2B6B,EAASjG,EAAegF,SAC3C+C,EAAa7H,WAAS,IAAM,CAACF,EAAegF,GAC/CgC,OAAOC,GAAOA,GACdtI,OAAO,CAACqJ,EAAQf,IACRe,EAAOzH,OAAO9B,OAAOwJ,OAAOlJ,QAAOkI,KACzC,KAIC9F,EAASjB,WAAS,CACtBZ,IAAG,IACM2G,EAAQ9E,OAAOhC,SACnB4I,EAAW5I,MAAMU,QAASkI,EAAW5I,MAAM+I,MAAMrB,GAAKA,EAAE1F,QAE7DmG,IAAK5B,GACHO,EAAQ9E,OAAOhC,MAAQuG,KAIrBqB,EAAgB7G,WAAS,WAEvBiI,EAAcpJ,QAAOkH,EAAQc,gBAAkB,GAG/CqB,EAAeL,EAAW5I,MAC7B6H,OAAOlG,IAAW/B,QAAO+B,GAAQiG,eAAiB,IAAIlH,QACtDlB,OAAO,CAAC0J,EAAQvH,IACRuH,EAAO9H,UAAUO,EAAOiG,eAC9B,WAGEoB,EAAY5H,OAAO6H,KAGtBjB,EAAUjH,WAAS,WAEjBiI,EAAcpJ,QAAOkH,EAAQkB,UAAY,GAGzCiB,EAAeL,EAAW5I,MAC7B6H,OAAOlG,IAAW/B,QAAO+B,GAAQqG,SAAW,IAAItH,QAChDlB,OAAO,CAAC0J,EAAQvH,IACRuH,EAAO9H,UAAUO,EAAOqG,SAC9B,WAGEgB,EAAY5H,OAAO6H,KAGtBtG,EAAW5B,WAAS,IAExB6H,EAAW5I,MAAMgB,KAAK0G,GAAKA,EAAE/E,WAE7B/C,QAAOkH,EAAQnE,eAKXJ,EAAWxB,WAAS,IAExB6H,EAAW5I,MAAMgB,KAAK0G,GAAK9H,QAAO8H,EAAEnF,YAEpC3C,QAAOkH,EAAQvE,eAKXoG,EAAY5H,WAAS,IACzB6H,EAAW5I,MAAMgB,KAAK0G,GAAKA,EAAE1F,SAC7B4G,EAAW5I,MAAMgB,KAAK0G,GAAKA,EAAEiB,YAC7B3G,EAAOhC,OAGH2H,EAAS5G,WAAS,MAAMiB,EAAOhC,QAAQuC,EAASvC,OAAS2C,EAAS3C,QAElE+E,EAAS,KAEb+B,EAAQ/B,SAER6D,EAAW5I,MAAMsG,QAAS3E,IACxBA,EAAOoD,mBAuBP6D,EAAW5I,MAAMU,QAAUkI,EAAW5I,MAAM+I,MAAMI,GAAMA,EAAGnH,SAAS+C,IAEjE,CACL/C,OAAAA,EACAgG,QAAAA,EACArF,SAAAA,EACAgG,UAAAA,EACAhB,OAAAA,EACApF,SAAAA,EACAwC,OAAAA,EACAoC,OApBa,KAEbL,EAAQK,SAERyB,EAAW5I,MAAMsG,QAAS3E,IACxBA,EAAOwF,YAgBTS,cAAAA,EACA3C,QA/Bc,KAEd6B,EAAQ7B,UAER2D,EAAW5I,MAAMsG,QAAS3E,IACxBA,EAAOsD,cAsIPmE,CAAiBtC,EAASjG,EAAegF,GAMvCxB,EAASsB,EACX5E,WAAS,CACTZ,IAAK,IAAMP,QAAO8G,GAClByB,IAAKrI,IACHkC,EAAOhC,OAAQ,QACT2G,EAAI/G,QAAO8F,GACX2D,EAAWzJ,QAAOoG,GACpBqD,IACFA,EAAS1D,GAAOiB,EAAsBjB,IAEpC2D,QAAM3C,EAAEhB,IACVgB,EAAEhB,GAAK3F,MAAQF,EAEf6G,EAAEhB,GAAO7F,KAIb,YAEA6F,GAAOX,EAAauE,YACtBrG,QAAMwD,EAAa,KACZ1E,EAAOhC,OAAO+E,UACbsE,EAAWzJ,QAAOoG,GACpBqD,IACFA,EAAS1D,GAAOiB,EAAsBjB,KAEvC,CAAE6D,MAAO,SAmDPzB,4BACFjB,GAIHzC,OAAAA,EACArC,OAAAA,EACA2F,OAAAA,EACAK,QAAAA,EACArF,SAAAA,EACAgG,UAAAA,EACApG,SAAAA,EACAwC,OAAAA,EACAoC,OAAAA,EACAD,MAAO3G,GAliBO,SAmiBdqH,cAAAA,EACA/C,UAAAA,EACAI,QAAAA,GAEIY,GAAgB,CAClB4D,6BAxC0B9D,UACpBE,EAAa7F,OAAS,IAAI2F,IAwChC+D,iCApCEJ,QAAMtD,GACRA,EAAgBhG,MAAQ4G,EAG0B,IAA9CtH,OAAOC,KAAKqH,GAAuBlG,OACrCpB,OAAOC,KAAKyG,GAAiBM,QAAS5G,WAC7BsG,EAAgBtG,KAIzBJ,OAAOqK,OAAO3D,EAAiBY,IA2BjC4B,kBAAAA,GAGC3H,IEhjBQ,MAAM+I,EACnBC,mBACOC,QAAU,IAAIC,IASrB5B,IAAK5H,EAAM0F,EAAOtE,QACXmI,QAAQ3B,IAAI5H,EAAM,CAAE0F,MAAAA,EAAOtE,OAAAA,IAUlCqI,mBAAoBzJ,EAAM0F,EAAOgE,SACzBC,EAAkB5K,OAAOC,KAAK0K,GAC9BE,EAAe7K,OAAOC,KAAK0G,MAE7BkE,EAAazJ,SAAWwJ,EAAgBxJ,OAAQ,OAAO,UAElCyJ,EAAapB,MAAM3B,GAAW8C,EAAgBvK,SAASyH,KAGzE+C,EAAapB,MAAM3B,IACnBnB,EAAMmB,GAAS3E,SACbnD,OAAOC,KAAK0G,EAAMmB,GAAS3E,SAC/BsG,MAAMqB,GAEExK,QAAOqK,EAAY7C,GAAS3E,QAAQ2H,MAAexK,QAAOqG,EAAMmB,GAAS3E,QAAQ2H,MAWhGjK,IAAKI,EAAM0F,SACHoE,EAAuB7E,KAAKsE,QAAQ3J,IAAII,OACzC8J,EAAsB,aACnBpE,MAAOgE,EAATtI,OAAsBA,GAAW0I,EAEjCC,EAAe9E,KAAKwE,mBAAmBzJ,EAAM0F,EAAOgE,GAEpDrH,EAAWjB,EAAOiB,SAAWjB,EAAOiB,SAAW,gBAEhD0H,EACE3I,EADmB,CAAEK,OAAQL,EAAOK,OAAQiF,UAAU,EAAMrE,SAAAA,UCvD1D2H,EAAc,CACzBC,aAAa,EACbC,cAAc,GAGVC,EAA8BC,OAAO,gCACrCC,EAA8BD,OAAO,gCAQpC,SAASE,SAAmBC,OAAEA,EAAFtJ,SAAUA,WACrCuJ,EAAkB,GAClBC,EAAmBxI,MAAI,IACvBqD,EAAe9E,WAAS,IAAMiK,EAAiBhL,MAAMR,OAAO,CAACsH,EAASnB,KAC1EmB,EAAQnB,GAAO/F,QAAOmL,EAAgBpF,IAC/BmB,GACN,KAwBHtF,EAASyJ,2BAA6B,GAAG7J,OAAOI,EAASyJ,4BAA8B,aAfhDnE,SAAWoE,YAAavF,EAAKmF,OAAQK,EAA5BC,iBAAwCA,KAEpFA,GACAN,IAAWP,EAAYE,cACvBU,IAAeZ,EAAYE,cAEzBK,IAAWP,EAAYC,aACvBM,IAAWK,IAGfJ,EAAgBpF,GAAOmB,EACvBkE,EAAiBhL,MAAMqL,KAAK1F,OAkB9BnE,EAAS8J,2BAA6B,GAAGlK,OAAOI,EAAS8J,4BAA8B,aARhD3F,GAErCqF,EAAiBhL,MAAQgL,EAAiBhL,MAAM6H,OAAO0D,GAAYA,IAAa5F,UAEzEoF,EAAgBpF,YAOnB6F,EAAgCC,SAAOf,EAA6B,IAE1EgB,UAAQhB,EAA6BlJ,EAASyJ,kCAExCU,EAAoCF,SAAOb,EAA6B,WAE9Ec,UAAQd,EAA6BpJ,EAAS8J,4BAEvC,CAAEzF,aAAAA,EAAc2F,8BAAAA,EAA+BG,kCAAAA,GChEjD,SAASC,EAAsBC,UAC7B,IAAIC,MAAMD,EAAQ,CACvB1L,IAAG,CAAE0L,EAAQE,IACqB,iBAAjBF,EAAOE,GAClBH,EAAqBC,EAAOE,IAC5BhL,WAAS,IAAM8K,EAAOE,MCazB,SAASC,EAAcvG,EAAaC,aAAOK,yDAAe,GAGtC,IAArBT,UAAU5E,SACZqF,EAAeN,EACfA,OAAc7D,EACd8D,OAAQ9D,OAENsJ,YAAEA,EAAFJ,OAAeA,EAASP,EAAYC,YAApCY,iBAAiDA,EAAjD/D,iBAAmEA,EAAnE4E,mBAAqFA,GAAuBlG,QAE1GvE,EAAWyK,cAAsBC,2CAAAC,EAAsBC,OAEvDC,EAAmB7K,EACrBA,EAAS8K,SACT,OAECpB,GAAe1J,EAAU,OAItB+K,EAAM/K,EAAS+K,KAAO/K,EAASgL,KACrCtB,EAAe,cAAaqB,QAExBE,EAAoBjK,MAAI,IACxBsD,EAAe,IAAI8D,GAEnB/D,aACJA,EADI2F,8BAEJA,EAFIG,kCAGJA,GACEnK,EACAqJ,EAAkB,CAAEC,OAAAA,EAAQtJ,SAAAA,IAC5B,CAAEqE,aAAcrD,MAAI,SAGnBiD,GAAe4G,EAAiB5G,YAAa,OAC1CQ,EAAQoG,EAAiB5G,YAE/BC,EAAQlD,MAAI,IACZkK,gBAAc,KAGZhH,EAAM1F,MAAQwB,EAEd0B,QAAM,IAAMrD,EAAWoG,GAASA,EAAMxE,KAAKiE,EAAM1F,MAAO,IAAI4L,EAAqBlG,EAAM1F,QAAUiG,EAC9FR,IACCgH,EAAkBzM,MAAQ4E,EAAe,CACvCa,YAAAA,EACAC,MAAAA,EACAG,aAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAvE,SAAAA,EACAwE,gBAAiBqB,GAAoB7F,EAASmL,4BAE/C,CAAE/I,WAAW,MAGpBmC,EAAesG,EAAiBO,mBAAqB7G,MAChD,OACC8G,EAAyBvD,QAAM7D,IAAgB1F,EAAQ0F,GACzDA,EAEAsC,WAAStC,GAAe,IAE5BvC,QAAM2J,EAAyBC,IAC7BL,EAAkBzM,MAAQ4E,EAAe,CACvCa,YAAaqH,EACbpH,MAAAA,EACAG,aAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAvE,SAAUA,MAAAA,EAAAA,EAAY,GACtBwE,gBAAiBqB,KAElB,CAAEzD,WAAW,WAGdpC,IAEFgK,EAA8BlF,QAASxB,GAAMA,EAAE2H,EAAmB,CAAEvB,YAAAA,EAAaJ,OAAAA,EAAQM,iBAAAA,KAEzF2B,kBAAgB,IAAMpB,EAAkCrF,QAASxB,GAAMA,EAAEoG,MAGpEnK,WAAS,qBAETnB,QAAO6M,EAAkBzM,OACzB6F,EAAa7F"}