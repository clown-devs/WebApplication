{"ast":null,"code":"import { mapActions } from \"vuex\";\nimport useVuelidate from \"@vuelidate/core\";\nimport { required, minLength } from \"@vuelidate/validators\";\nexport default {\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n\n  data() {\n    return {\n      username: \"\",\n      password: \"\",\n      isSavedSession: false,\n      passwordPlaceholder: \"Введите пароль...\",\n      loginPlaceholder: \"Введите логин...\"\n    };\n  },\n\n  validations() {\n    return {\n      username: {\n        required\n      },\n      password: {\n        required,\n        minLength: minLength(4)\n      }\n    };\n  },\n\n  methods: { ...mapActions([\"logIn\"]),\n\n    async touchLogIn() {\n      // if (!this.isValidForm()) {\n      //   return;\n      // }\n      console.log(this.v$);\n      const isCorrectForm = await this.v$.$validate();\n\n      if (!isCorrectForm) {\n        return;\n      }\n\n      const isAuth = await this.logIn({\n        username: this.username,\n        password: this.password,\n        isSavedSession: this.isSavedSession\n      });\n\n      if (isAuth) {\n        this.$router.push(\"/\");\n        return;\n      }\n\n      this.$router.push(\"/login\");\n    },\n\n    isHaveErrorAuth() {\n      return this.$store.state.auth.errorMessage !== \"\";\n    },\n\n    isValidForm() {\n      const MAX_PASSWORD_LEN = 4;\n      this.validationErrors = [];\n\n      if (this.username.length && this.password.length >= MAX_PASSWORD_LEN) {\n        return true;\n      }\n\n      return false;\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA+CA,SAASA,UAAT,QAA2B,MAA3B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,uBAApC;AAEA,eAAe;EACbC,KAAK,GAAG;IACN,OAAO;MACLC,EAAE,EAAEJ,YAAY;IADX,CAAP;EAGD,CALY;;EAObK,IAAI,GAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EADL;MAELC,QAAQ,EAAE,EAFL;MAGLC,cAAc,EAAE,KAHX;MAILC,mBAAmB,EAAE,mBAJhB;MAKLC,gBAAgB,EAAE;IALb,CAAP;EAOD,CAfY;;EAiBbC,WAAW,GAAG;IACZ,OAAO;MACLL,QAAQ,EAAE;QAAEL;MAAF,CADL;MAELM,QAAQ,EAAE;QAAEN,QAAF;QAAYC,SAAS,EAAEA,SAAS,CAAC,CAAD;MAAhC;IAFL,CAAP;EAID,CAtBY;;EAwBbU,OAAO,EAAE,EACP,GAAGb,UAAU,CAAC,CAAC,OAAD,CAAD,CADN;;IAGP,MAAMc,UAAN,GAAmB;MACjB;MACA;MACA;MACAC,OAAO,CAACC,GAAR,CAAY,KAAKX,EAAjB;MACA,MAAMY,aAAY,GAAI,MAAM,KAAKZ,EAAL,CAAQa,SAAR,EAA5B;;MACA,IAAI,CAACD,aAAL,EAAoB;QAClB;MACF;;MAEA,MAAME,MAAK,GAAI,MAAM,KAAKC,KAAL,CAAW;QAC9Bb,QAAQ,EAAE,KAAKA,QADe;QAE9BC,QAAQ,EAAE,KAAKA,QAFe;QAG9BC,cAAc,EAAE,KAAKA;MAHS,CAAX,CAArB;;MAMA,IAAIU,MAAJ,EAAY;QACV,KAAKE,OAAL,CAAaC,IAAb,CAAkB,GAAlB;QACA;MACF;;MAEA,KAAKD,OAAL,CAAaC,IAAb,CAAkB,QAAlB;IACD,CAzBM;;IA2BPC,eAAe,GAAG;MAChB,OAAO,KAAKC,MAAL,CAAYC,KAAZ,CAAkBC,IAAlB,CAAuBC,YAAvB,KAAwC,EAA/C;IACD,CA7BM;;IA+BPC,WAAW,GAAG;MACZ,MAAMC,gBAAe,GAAI,CAAzB;MAEA,KAAKC,gBAAL,GAAwB,EAAxB;;MAEA,IAAI,KAAKvB,QAAL,CAAcwB,MAAd,IAAwB,KAAKvB,QAAL,CAAcuB,MAAd,IAAwBF,gBAApD,EAAsE;QACpE,OAAO,IAAP;MACF;;MAEA,OAAO,KAAP;IACD;;EAzCM;AAxBI,CAAf","names":["mapActions","useVuelidate","required","minLength","setup","v$","data","username","password","isSavedSession","passwordPlaceholder","loginPlaceholder","validations","methods","touchLogIn","console","log","isCorrectForm","$validate","isAuth","logIn","$router","push","isHaveErrorAuth","$store","state","auth","errorMessage","isValidForm","MAX_PASSWORD_LEN","validationErrors","length"],"sourceRoot":"","sources":["/Users/root1/Developments/SberMeetingsWeb/WebApplication/vue-project/src/pages/Login.vue"],"sourcesContent":["<template>\n  <div class=\"login-container\">\n    <form @submit.prevent>\n      <h1 class=\"title\">Вход в систему</h1>\n      <input\n        type=\"text\"\n        id=\"login\"\n        name=\"user_login\"\n        v-model=\"username\"\n        placeholder=\"Введите логин...\"\n        :class=\"{ invalid: v$.username.$error }\"\n      />\n      <small v-if=\"v$.username.$error\" class=\"validate-error-message\">\n        Логин не должен быть пустым!\n      </small>\n      \n      <input\n        type=\"password\"\n        id=\"password\"\n        name=\"user_password\"\n        v-model=\"v$.password.$model\"\n        placeholder=\"Введите пароль...\"\n        :class=\"{ invalid: v$.password.$error}\"\n      />\n      <small v-if=\"v$.password.$dirty && !v$.password.required\" class=\"validate-error-message\">\n        Пароль не должен быть пустым!\n      </small>\n\n      <div class=\"save-container\">\n        <input\n          type=\"checkbox\"\n          id=\"save\"\n          name=\"selected_save\"\n          v-model=\"isSavedSession\"\n        />\n        <label for=\"save\" class=\"save-label\">Запомнить</label>\n      </div>\n      <button type=\"submit\" @click=\"touchLogIn\">Далее</button>\n\n      <div v-if=\"isHaveErrorAuth()\" class=\"error-container\">\n        {{ this.$store.state.auth.errorMessage }}\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { mapActions } from \"vuex\";\nimport useVuelidate from \"@vuelidate/core\";\nimport { required, minLength } from \"@vuelidate/validators\";\n\nexport default {\n  setup() {\n    return {\n      v$: useVuelidate(),\n    };\n  },\n\n  data() {\n    return {\n      username: \"\",\n      password: \"\",\n      isSavedSession: false,\n      passwordPlaceholder: \"Введите пароль...\",\n      loginPlaceholder: \"Введите логин...\",\n    };\n  },\n\n  validations() {\n    return {\n      username: { required },\n      password: { required, minLength: minLength(4) },\n    };\n  },\n\n  methods: {\n    ...mapActions([\"logIn\"]),\n\n    async touchLogIn() {\n      // if (!this.isValidForm()) {\n      //   return;\n      // }\n      console.log(this.v$);\n      const isCorrectForm = await this.v$.$validate();\n      if (!isCorrectForm) {\n        return;\n      }\n\n      const isAuth = await this.logIn({\n        username: this.username,\n        password: this.password,\n        isSavedSession: this.isSavedSession,\n      });\n\n      if (isAuth) {\n        this.$router.push(\"/\");\n        return;\n      }\n\n      this.$router.push(\"/login\");\n    },\n\n    isHaveErrorAuth() {\n      return this.$store.state.auth.errorMessage !== \"\";\n    },\n\n    isValidForm() {\n      const MAX_PASSWORD_LEN = 4;\n\n      this.validationErrors = [];\n\n      if (this.username.length && this.password.length >= MAX_PASSWORD_LEN) {\n        return true;\n      }\n\n      return false;\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Main */\n\n.login-container {\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\nform {\n  background: rgba(255, 255, 255, 0.58);\n  border: 1px solid #47af52;\n  border-radius: 30px;\n  width: 596px;\n  height: 660px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\nh1 {\n  color: #00b268;\n  font-size: 2rem;\n  text-align: center;\n  font-weight: normal;\n  margin-top: 16.36%;\n  margin-bottom: 13.03%;\n  width: 80.8%;\n}\n\ninput {\n  width: 80.8%;\n  background: rgba(255, 255, 255, 0);\n  border-bottom-color: #00b268;\n  border-top-style: none;\n  border-left-style: none;\n  border-right-style: none;\n}\n\ninput,\nlabel {\n  font-size: 1.25rem;\n  color: #00000085;\n}\n\ninput[type=\"text\"] {\n  margin-bottom: 18.18%;\n}\n\ninput[type=\"password\"] {\n  margin-bottom: 5.45%;\n  background: rgba(255, 255, 255, 0);\n}\n\n.save-container {\n  display: flex;\n  align-self: flex-start;\n  align-items: center;\n  margin-left: 9.56%;\n  margin-bottom: 8.48%;\n}\n\ninput[type=\"checkbox\"] {\n  min-width: 20px;\n  min-height: 20px;\n  margin-right: 10px;\n}\n\nbutton {\n  background: #47af52;\n  color: #ffffff;\n  font-size: 1.5rem;\n  border-radius: 30px;\n  border-width: 0;\n  width: 237px;\n  height: 60px;\n}\n\n.error-container {\n  border: 2px solid pink;\n  margin-top: 2.5rem;\n}\n\n/* Responcive CSS */\n\n@media (max-width: 1200px) {\n  form {\n    width: 60vw;\n    height: 70vh;\n    justify-content: center;\n    gap: 2.5rem;\n  }\n\n  h1,\n  input[type=\"text\"],\n  input[type=\"password\"],\n  label,\n  input[type=\"checkbox\"],\n  button,\n  .save-container,\n  .error-container {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n\n  button {\n    width: 50%;\n  }\n}\n\n@media (max-width: 992px) {\n  form {\n    gap: 2rem;\n    height: 100vh;\n    width: 100vw;\n    border: inherit;\n    border-radius: 0;\n  }\n}\n\n@media (max-width: 767px) {\n  form {\n    height: 100vh;\n    width: 100vw;\n    border-radius: 0;\n    border: inherit;\n  }\n\n  button {\n    width: 80%;\n    height: 2.5rem;\n  }\n}\n\n@media (max-height: 415px) {\n  form {\n    height: 100vh;\n    gap: 1.3rem;\n  }\n}\n\n/* Validation styles */\n\n.invalid {\n  border-bottom-color: red;\n}\n\n.validate-error-message {\n  color: red;\n  font-weight: bolder;\n}\n</style>"]},"metadata":{},"sourceType":"module"}