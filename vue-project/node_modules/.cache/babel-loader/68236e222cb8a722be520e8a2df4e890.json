{"ast":null,"code":"import api from '@/api';\nexport default {\n  actions: {\n    async logIn(context, {\n      username,\n      password,\n      isSavedSession\n    }) {\n      const token = await api.auth(username, password);\n\n      if (token === null) {\n        context.commit(\"setErrorMessage\", api.error);\n        api.error = '';\n        return false;\n      }\n\n      context.commit(\"setToken\", token.auth_token);\n      let isAuth = true;\n      const user = await context.dispatch('getUser');\n\n      if (user === null) {\n        isAuth = false;\n      }\n\n      if (isSavedSession) {\n        context.commit(\"saveSessionToLocalStorage\");\n      }\n\n      context.commit(\"saveSessionToSessionStorage\");\n      context.commit(\"setErrorMessage\", api.error);\n      return isAuth;\n    },\n\n    async getUser(context) {\n      const user = await api.currentUser(context.state.token);\n\n      if (user === null) {\n        context.commit(\"setErrorMessage\", api.error);\n        api.error = '';\n        return null;\n      }\n\n      context.commit(\"updateUser\", user);\n      return user;\n    }\n\n  },\n  mutations: {\n    setToken(state, token) {\n      state.token = token;\n    },\n\n    saveSessionToLocalStorage(state) {\n      localStorage.setItem(\"token\", state.token);\n      localStorage.setItem(\"user\", JSON.stringify(state.user));\n    },\n\n    saveSessionToSessionStorage(state) {\n      sessionStorage.setItem(\"token\", state.token);\n      sessionStorage.setItem(\"user\", JSON.stringify(state.user));\n    },\n\n    updateUser(state, user) {\n      state.user = user;\n    },\n\n    loadDataFromLocalStorage(state) {\n      state.token = localStorage.getItem(\"token\");\n      state.user = JSON.parse(localStorage.getItem(\"user\"));\n    },\n\n    loadDataFromSessionStorage(state) {\n      state.token = sessionStorage.getItem(\"token\");\n      state.user = JSON.parse(sessionStorage.getItem(\"user\"));\n    },\n\n    logOut(state) {\n      state.token = \"\";\n      state.user = {};\n      localStorage.removeItem('token');\n      localStorage.removeItem(\"user\");\n    },\n\n    setErrorMessage(state, error) {\n      state.errorMessage = error;\n    }\n\n  },\n  state: {\n    token: null,\n    user: {},\n    errorMessage: ''\n  },\n  getters: {}\n};","map":{"version":3,"names":["api","actions","logIn","context","username","password","isSavedSession","token","auth","commit","error","auth_token","isAuth","user","dispatch","getUser","currentUser","state","mutations","setToken","saveSessionToLocalStorage","localStorage","setItem","JSON","stringify","saveSessionToSessionStorage","sessionStorage","updateUser","loadDataFromLocalStorage","getItem","parse","loadDataFromSessionStorage","logOut","removeItem","setErrorMessage","errorMessage","getters"],"sources":["/Users/root1/Developments/SberMeetingsWeb/WebApplication/vue-project/src/store/modules/auth.js"],"sourcesContent":["import api from '@/api'\n\nexport default {\n    actions: {\n        async logIn(context, { username, password, isSavedSession }) {\n            \n            const token = await api.auth(username, password);\n            if (token === null) {\n                context.commit(\"setErrorMessage\", api.error);\n                api.error = '';\n                return false;\n            }\n\n            context.commit(\"setToken\", token.auth_token);\n            \n            let isAuth = true;\n\n            const user = await context.dispatch('getUser');\n            if (user === null) {\n                isAuth = false;    \n            }\n\n            if (isSavedSession) {\n                context.commit(\"saveSessionToLocalStorage\");\n            }\n\n            context.commit(\"saveSessionToSessionStorage\");\n            context.commit(\"setErrorMessage\", api.error);\n            return isAuth;\n            \n        },\n\n        async getUser(context) {\n            const user = await api.currentUser(context.state.token);\n            if (user === null) {\n                context.commit(\"setErrorMessage\", api.error);\n                api.error = '';\n                return null;\n            }\n\n            context.commit(\"updateUser\", user);\n            return user;\n        }\n    },\n\n    mutations: {\n        setToken(state, token) {\n            state.token = token;\n        },\n\n        saveSessionToLocalStorage(state) {\n            localStorage.setItem(\"token\", state.token);\n            localStorage.setItem(\"user\", JSON.stringify(state.user));\n        },\n\n        saveSessionToSessionStorage(state) {\n            sessionStorage.setItem(\"token\", state.token);\n            sessionStorage.setItem(\"user\", JSON.stringify(state.user));\n        },\n\n        updateUser(state, user) {\n            state.user = user;\n        },\n\n        loadDataFromLocalStorage(state) {\n            state.token = localStorage.getItem(\"token\");\n            state.user = JSON.parse(localStorage.getItem(\"user\"));\n        },\n\n        loadDataFromSessionStorage(state) {\n            state.token = sessionStorage.getItem(\"token\");\n            state.user = JSON.parse(sessionStorage.getItem(\"user\"));\n        },\n\n        logOut(state) {\n            state.token = \"\";\n            state.user = {};\n            localStorage.removeItem('token');\n            localStorage.removeItem(\"user\");\n        },\n\n        setErrorMessage(state, error) {\n            state.errorMessage = error; \n        }\n    },\n\n    state: {\n        token: null,\n        user: {},\n        errorMessage: ''\n    },\n\n    getters: {}\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}