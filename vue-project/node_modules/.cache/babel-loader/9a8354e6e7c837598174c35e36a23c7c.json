{"ast":null,"code":"import api from '@/api';\nexport default {\n  actions: {\n    async logIn(context, {\n      username,\n      password,\n      isSavedSession\n    }) {\n      const res = await fetch(context.state.baseURL + \"users/auth/token/login/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      const token = await res.json();\n      context.commit(\"setToken\", token.auth_token);\n      await context.dispatch('getUser');\n\n      if (isSavedSession) {\n        context.commit(\"saveSessionToLocalStorage\");\n      }\n\n      context.commit(\"saveSessionToSessionStorage\");\n      const test = api.auth(username, password);\n      return true;\n    },\n\n    async getUser(context) {\n      const res = await fetch(context.state.baseURL + \"users/employee/current/\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Token \" + context.state.token\n        }\n      });\n      const user = await res.json();\n      context.commit(\"updateUser\", user);\n    }\n\n  },\n  mutations: {\n    setToken(state, token) {\n      state.token = token;\n    },\n\n    saveSessionToLocalStorage(state) {\n      localStorage.setItem(\"token\", state.token);\n      localStorage.setItem(\"user\", JSON.stringify(state.user));\n    },\n\n    saveSessionToSessionStorage(state) {\n      sessionStorage.setItem(\"token\", state.token);\n      sessionStorage.setItem(\"user\", JSON.stringify(state.user));\n    },\n\n    updateUser(state, user) {\n      state.user = user;\n    },\n\n    loadDataFromLocalStorage(state) {\n      state.token = localStorage.getItem(\"token\");\n      state.user = JSON.parse(localStorage.getItem(\"user\"));\n    },\n\n    loadDataFromSessionStorage(state) {\n      state.token = sessionStorage.getItem(\"token\");\n      state.user = JSON.parse(sessionStorage.getItem(\"user\"));\n    },\n\n    logOut(state) {\n      state.token = \"\";\n      state.user = {};\n      localStorage.removeItem('token');\n      localStorage.removeItem(\"user\");\n    }\n\n  },\n  state: {\n    token: null,\n    user: {},\n    baseURL: \"http://sbermeeting.tk/api/v2/\"\n  },\n  getters: {}\n};","map":{"version":3,"names":["api","actions","logIn","context","username","password","isSavedSession","res","fetch","state","baseURL","method","headers","body","JSON","stringify","token","json","commit","auth_token","dispatch","test","auth","getUser","user","mutations","setToken","saveSessionToLocalStorage","localStorage","setItem","saveSessionToSessionStorage","sessionStorage","updateUser","loadDataFromLocalStorage","getItem","parse","loadDataFromSessionStorage","logOut","removeItem","getters"],"sources":["/Users/root1/Developments/SberMeetingsWeb/WebApplication/vue-project/src/store/modules/auth.js"],"sourcesContent":["import api from '@/api'\n\nexport default {\n    actions: {\n        async logIn(context, {username, password, isSavedSession}) {\n            const res = await fetch(\n                context.state.baseURL + \"users/auth/token/login/\",\n                {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                  body: JSON.stringify({\n                    username,\n                    password\n                  }),\n                }\n              );\n        \n              const token = await res.json();\n              context.commit(\"setToken\", token.auth_token);\n              \n              await context.dispatch('getUser');\n\n              if (isSavedSession) {\n                context.commit(\"saveSessionToLocalStorage\");\n              }\n\n              context.commit(\"saveSessionToSessionStorage\");\n\n              const test = api.auth(username, password);\n              \n\n              return true;\n        },\n\n        async getUser(context) {\n            const res = await fetch(context.state.baseURL + \"users/employee/current/\", {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": \"Token \" + context.state.token\n                }\n              });\n        \n              const user = await res.json();\n              context.commit(\"updateUser\", user);\n        }\n    },\n    \n    mutations: {\n        setToken(state, token) {\n            state.token = token;\n        },\n\n        saveSessionToLocalStorage(state) {\n            localStorage.setItem(\"token\", state.token);\n            localStorage.setItem(\"user\", JSON.stringify(state.user));\n        },\n\n        saveSessionToSessionStorage(state) {\n            sessionStorage.setItem(\"token\", state.token);\n            sessionStorage.setItem(\"user\", JSON.stringify(state.user));\n        },\n\n        updateUser(state, user) {\n            state.user = user;\n        },\n\n        loadDataFromLocalStorage(state) {\n            state.token = localStorage.getItem(\"token\");\n            state.user = JSON.parse(localStorage.getItem(\"user\"));\n        },\n\n        loadDataFromSessionStorage(state) {\n            state.token = sessionStorage.getItem(\"token\");\n            state.user = JSON.parse(sessionStorage.getItem(\"user\"));\n        },\n\n        logOut(state) {\n            state.token = \"\";\n            state.user = {};\n            localStorage.removeItem('token');\n            localStorage.removeItem(\"user\");\n        }\n    },\n    \n    state: {\n        token: null,\n        user: {},\n        baseURL: \"http://sbermeeting.tk/api/v2/\",\n    },\n    \n    getters: {}\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}