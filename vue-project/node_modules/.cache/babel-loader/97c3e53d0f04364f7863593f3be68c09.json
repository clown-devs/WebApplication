{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { isReactive, isReadonly, computed, unref, ref, watch, reactive, isRef, nextTick, inject, provide, getCurrentInstance, onBeforeMount, onBeforeUnmount } from 'vue-demi';\n\nfunction unwrapObj(obj) {\n  let ignoreKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return Object.keys(obj).reduce((o, k) => {\n    if (ignoreKeys.includes(k)) return o;\n    o[k] = unref(obj[k]);\n    return o;\n  }, {});\n}\n\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\n\nfunction isProxy(value) {\n  return isReactive(value) || isReadonly(value);\n}\n\nfunction get(obj, stringPath, def) {\n  // Cache the current object\n  let current = obj;\n  const path = stringPath.split('.'); // For each item in the path, dig into the object\n\n  for (let i = 0; i < path.length; i++) {\n    // If the item isn't found, return the default (or null)\n    if (!current[path[i]]) return def; // Otherwise, update the current  value\n\n    current = current[path[i]];\n  }\n\n  return current;\n}\n\nfunction gatherBooleanGroupProperties(group, nestedResults, property) {\n  return computed(() => {\n    return group.some(path => {\n      return get(nestedResults, path, {\n        [property]: false\n      })[property];\n    });\n  });\n}\n\nfunction gatherArrayGroupProperties(group, nestedResults, property) {\n  return computed(() => {\n    return group.reduce((all, path) => {\n      const fetchedProperty = get(nestedResults, path, {\n        [property]: false\n      })[property] || [];\n      return all.concat(fetchedProperty);\n    }, []);\n  });\n}\n/**\n * Response form a raw Validator function.\n * Should return a Boolean or an object with $invalid property.\n * @typedef {Boolean | { $valid: Boolean }} ValidatorResponse\n */\n\n/**\n * Calls a validation rule by unwrapping its value first from a ref.\n * @param {Validator} rule\n * @param {Ref} value\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @return {Promise<ValidatorResponse> | ValidatorResponse}\n */\n\n\nfunction callRule(rule, value, siblingState, instance) {\n  return rule.call(instance, unref(value), unref(siblingState), instance);\n}\n/**\n * Normalizes the validator result\n * Allows passing a boolean of an object like `{ $valid: Boolean }`\n * @param {ValidatorResponse} result - Validator result\n * @return {boolean}\n */\n\n\nfunction normalizeValidatorResponse(result) {\n  return result.$valid !== undefined ? !result.$valid : !result;\n}\n/**\n * Returns the result of an async validator.\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $pending\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Ref<*>[]} watchTargets\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @param {Ref<Number>} $lastCommittedOn\n * @return {{ $invalid: Ref<Boolean>, $unwatch: WatchStopHandle }}\n */\n\n\nfunction createAsyncResult(rule, model, $pending, $dirty, _ref, $response, instance) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref;\n  let watchTargets = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n  let siblingState = arguments.length > 8 ? arguments[8] : undefined;\n  let $lastInvalidState = arguments.length > 9 ? arguments[9] : undefined;\n  let $lastCommittedOn = arguments.length > 10 ? arguments[10] : undefined;\n  const $invalid = ref(!!$dirty.value);\n  const $pendingCounter = ref(0);\n  $pending.value = false;\n  const $unwatch = watch([model, $dirty].concat(watchTargets, $lastCommittedOn), () => {\n    if ( // if $lazy and not dirty, return\n    $lazy && !$dirty.value || // if in $rewardEarly mode and no previous errors, nothing pending, return\n    $rewardEarly && !$lastInvalidState.value && !$pending.value) {\n      return;\n    }\n\n    let ruleResult; // make sure we dont break if a validator throws\n\n    try {\n      ruleResult = callRule(rule, model, siblingState, instance);\n    } catch (err) {\n      // convert to a promise, so we can handle it async\n      ruleResult = Promise.reject(err);\n    }\n\n    $pendingCounter.value++;\n    $pending.value = !!$pendingCounter.value; // ensure $invalid is false, while validator is resolving\n\n    $invalid.value = false;\n    Promise.resolve(ruleResult).then(data => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = data;\n      $invalid.value = normalizeValidatorResponse(data);\n    }).catch(error => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = error;\n      $invalid.value = true;\n    });\n  }, {\n    immediate: true,\n    deep: typeof model === 'object'\n  });\n  return {\n    $invalid,\n    $unwatch\n  };\n}\n/**\n * Returns the result of a sync validator\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {Boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @return {{$unwatch: (function(): {}), $invalid: ComputedRef<boolean>}}\n */\n\n\nfunction createSyncResult(rule, model, $dirty, _ref2, $response, instance, siblingState, $lastInvalidState) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref2;\n\n  const $unwatch = () => ({});\n\n  const $invalid = computed(() => {\n    if ( // return early if $lazy mode and not touched\n    $lazy && !$dirty.value || // If $rewardEarly mode is ON and last invalid was false (no error), return it.\n    // If we want to invalidate, we just flip the last state to true, causing the computed to run again\n    $rewardEarly && !$lastInvalidState.value) {\n      return false;\n    }\n\n    let returnValue = true;\n\n    try {\n      const result = callRule(rule, model, siblingState, instance);\n      $response.value = result;\n      returnValue = normalizeValidatorResponse(result);\n    } catch (err) {\n      $response.value = err;\n    }\n\n    return returnValue;\n  });\n  return {\n    $unwatch,\n    $invalid\n  };\n}\n/**\n * Returns the validation result.\n * Detects async and sync validators.\n * @param {NormalizedValidator} rule\n * @param {Ref<*>} model\n * @param {Ref<boolean>} $dirty\n * @param {GlobalConfig} config - Vuelidate config\n * @param {VueInstance} instance - component instance\n * @param {string} validatorName - name of the current validator\n * @param {string} propertyKey - the current property we are validating\n * @param {string} propertyPath - the deep path to the validated property\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState - the last invalid state\n * @param {Ref<Number>} $lastCommittedOn - the last time $commit was called\n * @return {{ $params: *, $message: Ref<String>, $pending: Ref<Boolean>, $invalid: Ref<Boolean>, $response: Ref<*>, $unwatch: WatchStopHandle }}\n */\n\n\nfunction createValidatorResult(rule, model, $dirty, config, instance, validatorName, propertyKey, propertyPath, siblingState, $lastInvalidState, $lastCommittedOn) {\n  const $pending = ref(false);\n  const $params = rule.$params || {};\n  const $response = ref(null);\n  let $invalid;\n  let $unwatch;\n\n  if (rule.$async) {\n    ({\n      $invalid,\n      $unwatch\n    } = createAsyncResult(rule.$validator, model, $pending, $dirty, config, $response, instance, rule.$watchTargets, siblingState, $lastInvalidState, $lastCommittedOn));\n  } else {\n    ({\n      $invalid,\n      $unwatch\n    } = createSyncResult(rule.$validator, model, $dirty, config, $response, instance, siblingState, $lastInvalidState));\n  }\n\n  const message = rule.$message;\n  const $message = isFunction(message) ? computed(() => message(unwrapObj({\n    $pending,\n    $invalid,\n    $params: unwrapObj($params),\n    // $params can hold refs, so we unwrap them for easy access\n    $model: model,\n    $response,\n    $validator: validatorName,\n    $propertyPath: propertyPath,\n    $property: propertyKey\n  }))) : message || '';\n  return {\n    $message,\n    $params,\n    $pending,\n    $invalid,\n    $response,\n    $unwatch\n  };\n}\n/**\n * Sorts a validation definition into rules, configs and nested validators.\n * @param {Object<NormalizedValidator|Function>} validationsRaw\n * @return {{ rules: Object<NormalizedValidator>, nestedValidators: Object, config: GlobalConfig }}\n */\n\n\nfunction sortValidations() {\n  let validationsRaw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const validations = unref(validationsRaw);\n  const validationKeys = Object.keys(validations);\n  const rules = {};\n  const nestedValidators = {};\n  const config = {};\n  let validationGroups = null;\n  validationKeys.forEach(key => {\n    const v = validations[key];\n\n    switch (true) {\n      // If it is already normalized, use it\n      case isFunction(v.$validator):\n        rules[key] = v;\n        break;\n      // If it is just a function, normalize it first\n      // into { $validator: <Fun> }\n\n      case isFunction(v):\n        rules[key] = {\n          $validator: v\n        };\n        break;\n\n      case key === '$validationGroups':\n        validationGroups = v;\n        break;\n      // Catch $-prefixed properties as config\n\n      case key.startsWith('$'):\n        config[key] = v;\n        break;\n      // If it doesnâ€™t match any of the above,\n      // treat as nestedValidators state property\n\n      default:\n        nestedValidators[key] = v;\n    }\n  });\n  return {\n    rules,\n    nestedValidators,\n    config,\n    validationGroups\n  };\n}\n\nfunction _empty() {}\n\nconst ROOT_PATH = '__root';\n/** @typedef {import('vue-demi').ComponentPublicInstance} VueInstance */\n\n/** @typedef {import('vue-demi').ComputedRef} ComputedRef */\n\n/** @typedef {import('vue-demi').UnwrapRef} UnwrapRef */\n\n/** @typedef {import('vue-demi').WatchStopHandle} WatchStopHandle */\n\n/** @typedef {import('vue-demi').WritableComputedRef} WritableComputedRef */\n\n/** @typedef {import('vue-demi').UnwrapNestedRefs} UnwrapNestedRefs */\n\n/**\n * @typedef NormalizedValidator\n * @property {Validator} $validator\n * @property {String | Ref<String> | function(*): string} [$message]\n * @property {Object | Ref<Object>} [$params]\n * @property {Object | Ref<Object>} [$async]\n * @property {Ref<*>[]} [$watchTargets]\n */\n\n/**\n * Raw validator function, before being normalized\n * Can return a Promise or a {@see ValidatorResponse}\n * @typedef {function(*): ((Promise<ValidatorResponse> | ValidatorResponse))} Validator\n */\n\n/**\n * @typedef ErrorObject\n * @property {Ref<String>} $message - Reactive error message\n * @property {Ref<Object>} $params - Params passed from withParams\n * @property {Ref<Boolean>} $pending - If validation is pending\n * @property {String} $property - State key\n * @property {String} $propertyPath - Dot notation path to state\n * @property {String} $validator - Validator name\n * @property {String} $uid - Unique identifier\n */\n\n/**\n * @typedef ValidationResult\n * @property {Ref<Boolean>} $pending\n * @property {Ref<Boolean>} $dirty\n * @property {Ref<Boolean>} $invalid\n * @property {Ref<Boolean>} $error\n * @property {Ref<String>} $path\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} $commit\n */\n\n/**\n * Creates the main Validation Results object for a state tree\n * Walks the tree's top level branches\n * @param {Object<NormalizedValidator>} rules - Rules for the current state tree\n * @param {Object} model - Current state value\n * @param {String} key - Key for the current state tree\n * @param {ResultsStorage} [resultsCache] - A cache map of all the validators\n * @param {String} [path] - the current property path\n * @param {GlobalConfig} [config] - the config object\n * @param {VueInstance} instance\n * @param {ComputedRef<Object>} externalResults\n * @param {Object} siblingState\n * @return {ValidationResult | {}}\n */\n\nfunction _call(body, then, direct) {\n  if (direct) {\n    return then ? then(body()) : body();\n  }\n\n  try {\n    var result = Promise.resolve(body());\n    return then ? result.then(then) : result;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n/**\n * Collects the validation results of all nested state properties\n * @param {Object<NormalizedValidator|Function>} validations - The validation\n * @param {Object} nestedState - Current state\n * @param {String} path - Path to current property\n * @param {ResultsStorage} resultsCache - Validations cache map\n * @param {GlobalConfig} config - The config object\n * @param {VueInstance} instance - The current Vue instance\n * @param {ComputedRef<object>} nestedExternalResults - The external results for this nested collection\n * @return {Object<string, VuelidateState>}\n */\n\n\nfunction _callIgnored(body, direct) {\n  return _call(body, _empty, direct);\n}\n\nfunction _invoke(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction createValidationResults(rules, model, key, resultsCache, path, config, instance, externalResults, siblingState) {\n  // collect the property keys\n  const ruleKeys = Object.keys(rules);\n  const cachedResult = resultsCache.get(path, rules);\n  const $dirty = ref(false); // state for the $rewardEarly option\n\n  /** The last invalid state of this property */\n\n  const $lastInvalidState = ref(false);\n  /** The last time $commit was called. Used to re-trigger async calls */\n\n  const $lastCommittedOn = ref(0);\n\n  if (cachedResult) {\n    // if the rules are the same as before, use the cached results\n    if (!cachedResult.$partial) return cachedResult; // remove old watchers\n\n    cachedResult.$unwatch(); // use the `$dirty.value`, so we dont save references by accident\n\n    $dirty.value = cachedResult.$dirty.value;\n  }\n\n  const result = {\n    // restore $dirty from cache\n    $dirty,\n    $path: path,\n    $touch: () => {\n      if (!$dirty.value) $dirty.value = true;\n    },\n    $reset: () => {\n      if ($dirty.value) $dirty.value = false;\n    },\n    $commit: () => {}\n  };\n  /**\n   * If there are no validation rules, it is most likely\n   * a top level state, aka root\n   */\n\n  if (!ruleKeys.length) {\n    // if there are cached results, we should overwrite them with the new ones\n    cachedResult && resultsCache.set(path, rules, result);\n    return result;\n  }\n\n  ruleKeys.forEach(ruleKey => {\n    result[ruleKey] = createValidatorResult(rules[ruleKey], model, result.$dirty, config, instance, ruleKey, key, path, siblingState, $lastInvalidState, $lastCommittedOn);\n  });\n  result.$externalResults = computed(() => {\n    if (!externalResults.value) return [];\n    return [].concat(externalResults.value).map((stringError, index) => ({\n      $propertyPath: path,\n      $property: key,\n      $validator: '$externalResults',\n      $uid: `${path}-externalResult-${index}`,\n      $message: stringError,\n      $params: {},\n      $response: null,\n      $pending: false\n    }));\n  });\n  result.$invalid = computed(() => {\n    const r = ruleKeys.some(ruleKey => unref(result[ruleKey].$invalid)); // cache the last invalid state\n\n    $lastInvalidState.value = r;\n    return !!result.$externalResults.value.length || r;\n  });\n  result.$pending = computed(() => ruleKeys.some(ruleKey => unref(result[ruleKey].$pending)));\n  result.$error = computed(() => result.$dirty.value ? result.$pending.value || result.$invalid.value : false);\n  result.$silentErrors = computed(() => ruleKeys.filter(ruleKey => unref(result[ruleKey].$invalid)).map(ruleKey => {\n    const res = result[ruleKey];\n    return reactive({\n      $propertyPath: path,\n      $property: key,\n      $validator: ruleKey,\n      $uid: `${path}-${ruleKey}`,\n      $message: res.$message,\n      $params: res.$params,\n      $response: res.$response,\n      $pending: res.$pending\n    });\n  }).concat(result.$externalResults.value));\n  result.$errors = computed(() => result.$dirty.value ? result.$silentErrors.value : []);\n\n  result.$unwatch = () => ruleKeys.forEach(ruleKey => {\n    result[ruleKey].$unwatch();\n  });\n\n  result.$commit = () => {\n    $lastInvalidState.value = true;\n    $lastCommittedOn.value = Date.now();\n  };\n\n  resultsCache.set(path, rules, result);\n  return result;\n}\n\nfunction collectNestedValidationResults(validations, nestedState, path, resultsCache, config, instance, nestedExternalResults) {\n  const nestedValidationKeys = Object.keys(validations); // if we have no state, return empty object\n\n  if (!nestedValidationKeys.length) return {};\n  return nestedValidationKeys.reduce((results, nestedKey) => {\n    // build validation results for nested state\n    results[nestedKey] = setValidations({\n      validations: validations[nestedKey],\n      state: nestedState,\n      key: nestedKey,\n      parentKey: path,\n      resultsCache,\n      globalConfig: config,\n      instance,\n      externalResults: nestedExternalResults\n    });\n    return results;\n  }, {});\n}\n/**\n * Generates the Meta fields from the results\n * @param {ValidationResult|{}} results\n * @param {Object.<string, VuelidateState>} nestedResults\n * @param {Object.<string, ValidationResult>} childResults\n * @return {{$anyDirty: Ref<Boolean>, $error: Ref<Boolean>, $invalid: Ref<Boolean>, $errors: Ref<ErrorObject[]>, $dirty: Ref<Boolean>, $touch: Function, $reset: Function }}\n */\n\n\nfunction createMetaFields(results, nestedResults, childResults) {\n  const allResults = computed(() => [nestedResults, childResults].filter(res => res).reduce((allRes, res) => {\n    return allRes.concat(Object.values(unref(res)));\n  }, [])); // returns `$dirty` as true, if all children are dirty\n\n  const $dirty = computed({\n    get() {\n      return results.$dirty.value || (allResults.value.length ? allResults.value.every(r => r.$dirty) : false);\n    },\n\n    set(v) {\n      results.$dirty.value = v;\n    }\n\n  });\n  const $silentErrors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unref(results.$silentErrors) || []; // collect all nested and child $silentErrors\n\n    const nestedErrors = allResults.value.filter(result => (unref(result).$silentErrors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$silentErrors);\n    }, []); // merge the $silentErrors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  const $errors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unref(results.$errors) || []; // collect all nested and child $errors\n\n    const nestedErrors = allResults.value.filter(result => (unref(result).$errors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$errors);\n    }, []); // merge the $errors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  const $invalid = computed(() => // if any of the nested values is invalid\n  allResults.value.some(r => r.$invalid) || // or if the current state is invalid\n  unref(results.$invalid) || // fallback to false if is root\n  false);\n  const $pending = computed(() => // if any of the nested values is pending\n  allResults.value.some(r => unref(r.$pending)) || // if any of the current state validators is pending\n  unref(results.$pending) || // fallback to false if is root\n  false);\n  const $anyDirty = computed(() => allResults.value.some(r => r.$dirty) || allResults.value.some(r => r.$anyDirty) || $dirty.value);\n  const $error = computed(() => $dirty.value ? $pending.value || $invalid.value : false);\n\n  const $touch = () => {\n    // call the root $touch\n    results.$touch(); // call all nested level $touch\n\n    allResults.value.forEach(result => {\n      result.$touch();\n    });\n  };\n\n  const $commit = () => {\n    // call the root $touch\n    results.$commit(); // call all nested level $touch\n\n    allResults.value.forEach(result => {\n      result.$commit();\n    });\n  };\n\n  const $reset = () => {\n    // reset the root $dirty state\n    results.$reset(); // reset all the children $dirty states\n\n    allResults.value.forEach(result => {\n      result.$reset();\n    });\n  }; // Ensure that if all child and nested results are $dirty, this also becomes $dirty\n\n\n  if (allResults.value.length && allResults.value.every(nr => nr.$dirty)) $touch();\n  return {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  };\n}\n/**\n * @typedef VuelidateState\n * @property {WritableComputedRef<any>} $model\n * @property {ComputedRef<Boolean>} $dirty\n * @property {ComputedRef<Boolean>} $error\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<Boolean>} $invalid\n * @property {ComputedRef<Boolean>} $anyDirty\n * @property {ComputedRef<Boolean>} $pending\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {String} $path\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} [$validate]\n * @property {Function} [$getResultsForChild]\n * @property {Object.<string, VuelidateState>}\n */\n\n/**\n * Main Vuelidate bootstrap function.\n * Used both for Composition API in `setup` and for Global App usage.\n * Used to collect validation state, when walking recursively down the state tree\n * @param {Object} params\n * @param {Object<NormalizedValidator|Function>} params.validations\n * @param {Object} params.state\n * @param {String} [params.key] - Current state property key. Used when being called on nested items\n * @param {String} [params.parentKey] - Parent state property key. Used when being called recursively\n * @param {Object<string, ValidationResult>} [params.childResults] - Used to collect child results.\n * @param {ResultsStorage} params.resultsCache - The cached validation results\n * @param {VueInstance} params.instance - The current Vue instance\n * @param {GlobalConfig} params.globalConfig - The validation config, passed to this setValidations instance.\n * @param {UnwrapNestedRefs<object> | Ref<Object>} params.externalResults - External validation results\n * @return {UnwrapNestedRefs<VuelidateState>}\n */\n\n\nfunction setValidations(_ref) {\n  /**\n   * Executes the validators and returns the result.\n   * @return {Promise<boolean>}\n   */\n  const $validate = _async(function () {\n    $touch();\n    return _invoke(function () {\n      if (mergedConfig.$rewardEarly) {\n        $commit(); // await the watchers\n\n        return _callIgnored(nextTick);\n      }\n    }, function () {\n      // await the watchers\n      return _call(nextTick, function () {\n        return new Promise(resolve => {\n          // return whether it is valid or not\n          if (!$pending.value) return resolve(!$invalid.value);\n          const unwatch = watch($pending, () => {\n            resolve(!$invalid.value);\n            unwatch();\n          });\n        });\n      });\n    });\n  });\n  /**\n   * Returns a child component's results, based on registration name\n   * @param {string} key\n   * @return {VuelidateState}\n   */\n\n\n  let {\n    validations,\n    state,\n    key,\n    parentKey,\n    childResults,\n    resultsCache,\n    globalConfig = {},\n    instance,\n    externalResults\n  } = _ref;\n  const path = parentKey ? `${parentKey}.${key}` : key; // Sort out the validation object into:\n  // â€“ rules = validators for current state tree fragment\n  // â€” nestedValidators = nested state fragments keys that might contain more validators\n  // â€“ config = configuration properties that affect this state fragment\n\n  const {\n    rules,\n    nestedValidators,\n    config,\n    validationGroups\n  } = sortValidations(validations);\n  const mergedConfig = Object.assign({}, globalConfig, config); // create protected state for cases when the state branch does not exist yet.\n  // This protects when using the OptionsAPI as the data is bound after the setup method\n\n  const nestedState = key ? computed(() => {\n    const s = unref(state);\n    return s ? unref(s[key]) : undefined;\n  }) : state; // cache the external results, so we can revert back to them\n\n  const cachedExternalResults = Object.assign({}, unref(externalResults) || {});\n  const nestedExternalResults = computed(() => {\n    const results = unref(externalResults);\n    if (!key) return results;\n    return results ? unref(results[key]) : undefined;\n  }); // Use rules for the current state fragment and validate it\n\n  const results = createValidationResults(rules, nestedState, key, resultsCache, path, mergedConfig, instance, nestedExternalResults, state); // Use nested keys to repeat the process\n  // *WARN*: This is recursive\n\n  const nestedResults = collectNestedValidationResults(nestedValidators, nestedState, path, resultsCache, mergedConfig, instance, nestedExternalResults);\n  const $validationGroups = {};\n\n  if (validationGroups) {\n    Object.entries(validationGroups).forEach(_ref2 => {\n      let [key, group] = _ref2;\n      $validationGroups[key] = {\n        $invalid: gatherBooleanGroupProperties(group, nestedResults, '$invalid'),\n        $error: gatherBooleanGroupProperties(group, nestedResults, '$error'),\n        $pending: gatherBooleanGroupProperties(group, nestedResults, '$pending'),\n        $errors: gatherArrayGroupProperties(group, nestedResults, '$errors'),\n        $silentErrors: gatherArrayGroupProperties(group, nestedResults, '$silentErrors')\n      };\n    });\n  } // Collect and merge this level validation results\n  // with all nested validation results\n\n\n  const {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  } = createMetaFields(results, nestedResults, childResults);\n  /**\n   * If we have no `key`, this is the top level state\n   * We dont need `$model` there.\n   */\n\n  const $model = key ? computed({\n    get: () => unref(nestedState),\n    set: val => {\n      $dirty.value = true;\n      const s = unref(state);\n      const external = unref(externalResults);\n\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n\n      if (isRef(s[key])) {\n        s[key].value = val;\n      } else {\n        s[key] = val;\n      }\n    }\n  }) : null;\n\n  if (key && mergedConfig.$autoDirty) {\n    watch(nestedState, () => {\n      if (!$dirty.value) $touch();\n      const external = unref(externalResults);\n\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n    }, {\n      flush: 'sync'\n    });\n  }\n\n  function $getResultsForChild(key) {\n    return (childResults.value || {})[key];\n  }\n\n  function $clearExternalResults() {\n    if (isRef(externalResults)) {\n      externalResults.value = cachedExternalResults;\n    } else {\n      // if the external results state was empty, we need to delete every property, one by one\n      if (Object.keys(cachedExternalResults).length === 0) {\n        Object.keys(externalResults).forEach(k => {\n          delete externalResults[k];\n        });\n      } else {\n        // state was not empty, so we just assign it back into the current state\n        Object.assign(externalResults, cachedExternalResults);\n      }\n    }\n  }\n\n  return reactive(Object.assign({}, results, {\n    // NOTE: The order here is very important, since we want to override\n    // some of the *results* meta fields with the collective version of it\n    // that includes the results of nested state validation results\n    $model,\n    $dirty,\n    $error,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $pending,\n    $touch,\n    $reset,\n    $path: path || ROOT_PATH,\n    $silentErrors,\n    $validate,\n    $commit\n  }, childResults && {\n    $getResultsForChild,\n    $clearExternalResults,\n    $validationGroups\n  }, nestedResults));\n}\n\nclass ResultsStorage {\n  constructor() {\n    this.storage = new Map();\n  }\n  /**\n   * Stores a validation result, and its rules by its path\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {ValidationResult} result\n   */\n\n\n  set(path, rules, result) {\n    this.storage.set(path, {\n      rules,\n      result\n    });\n  }\n  /**\n   * Check if the stored `results` for the provided `path` have the same `rules` compared to 'storedRules'\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {Object<NormalizedValidator>} storedRules\n   * @return {Boolean}\n   */\n\n\n  checkRulesValidity(path, rules, storedRules) {\n    const storedRulesKeys = Object.keys(storedRules);\n    const newRulesKeys = Object.keys(rules);\n    if (newRulesKeys.length !== storedRulesKeys.length) return false;\n    const hasAllValidators = newRulesKeys.every(ruleKey => storedRulesKeys.includes(ruleKey));\n    if (!hasAllValidators) return false;\n    return newRulesKeys.every(ruleKey => {\n      if (!rules[ruleKey].$params) return true;\n      return Object.keys(rules[ruleKey].$params).every(paramKey => {\n        // make sure to unwrap before comparing\n        return unref(storedRules[ruleKey].$params[paramKey]) === unref(rules[ruleKey].$params[paramKey]);\n      });\n    });\n  }\n  /**\n   * Returns the matched result if catche is valid\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @return {{$partial: boolean, $dirty: Ref<Boolean>, $unwatch: function}|undefined|ValidationResult}\n   */\n\n\n  get(path, rules) {\n    const storedRuleResultPair = this.storage.get(path);\n    if (!storedRuleResultPair) return undefined;\n    const {\n      rules: storedRules,\n      result\n    } = storedRuleResultPair;\n    const isValidCache = this.checkRulesValidity(path, rules, storedRules);\n    const $unwatch = result.$unwatch ? result.$unwatch : () => ({});\n    if (!isValidCache) return {\n      $dirty: result.$dirty,\n      $partial: true,\n      $unwatch\n    };\n    return result;\n  }\n\n}\n\nconst CollectFlag = {\n  COLLECT_ALL: true,\n  COLLECT_NONE: false\n};\nconst VuelidateInjectChildResults = Symbol('vuelidate#injectChildResults');\nconst VuelidateRemoveChildResults = Symbol('vuelidate#removeChildResults');\n/**\n * Create helpers to collect validation state from child components\n * @param {Object} params\n * @param {String | Number | Boolean} params.$scope - Parent component scope\n * @return {{sendValidationResultsToParent: function[], childResults: ComputedRef<Object>, removeValidationResultsFromParent: function[]}}\n */\n\nfunction nestedValidations(_ref) {\n  let {\n    $scope,\n    instance\n  } = _ref;\n  const childResultsRaw = {};\n  const childResultsKeys = ref([]);\n  const childResults = computed(() => childResultsKeys.value.reduce((results, key) => {\n    results[key] = unref(childResultsRaw[key]);\n    return results;\n  }, {}));\n  /**\n   * Allows children to send validation data up to their parent.\n   * @param {Object} results - the results\n   * @param {Object} args\n   * @param {String} args.$registerAs - the $registeredAs key\n   * @param {String | Number | Boolean} args.$scope - the $scope key\n   */\n\n  function injectChildResultsIntoParent(results, _ref2) {\n    let {\n      $registerAs: key,\n      $scope: childScope,\n      $stopPropagation\n    } = _ref2;\n    if ($stopPropagation || $scope === CollectFlag.COLLECT_NONE || childScope === CollectFlag.COLLECT_NONE || $scope !== CollectFlag.COLLECT_ALL && $scope !== childScope) return;\n    childResultsRaw[key] = results;\n    childResultsKeys.value.push(key);\n  } // combine with other `injectChildResultsIntoParent` from vuelidate instances in this Vue component instance\n\n\n  instance.__vuelidateInjectInstances = [].concat(instance.__vuelidateInjectInstances || [], injectChildResultsIntoParent);\n  /**\n   * Allows children to remove the validation data from their parent, before getting destroyed.\n   * @param {String} key - the registeredAs key\n   */\n\n  function removeChildResultsFromParent(key) {\n    // remove the key\n    childResultsKeys.value = childResultsKeys.value.filter(childKey => childKey !== key); // remove the stored data for the key\n\n    delete childResultsRaw[key];\n  } // combine with other `removeChildResultsFromParent` from vuelidate instances in this Vue component instance\n\n\n  instance.__vuelidateRemoveInstances = [].concat(instance.__vuelidateRemoveInstances || [], removeChildResultsFromParent); // inject the `injectChildResultsIntoParent` method, into the current scope\n\n  const sendValidationResultsToParent = inject(VuelidateInjectChildResults, []); // provide to all of its children the send results to parent function\n\n  provide(VuelidateInjectChildResults, instance.__vuelidateInjectInstances);\n  const removeValidationResultsFromParent = inject(VuelidateRemoveChildResults, []); // provide to all of its children the remove results  function\n\n  provide(VuelidateRemoveChildResults, instance.__vuelidateRemoveInstances);\n  return {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  };\n}\n/**\n * Helper proxy for instance property access. It makes every reference\n * reactive for the validation function\n * @param target\n * @return {*|ComputedRef<*>}\n */\n\n\nfunction ComputedProxyFactory(target) {\n  return new Proxy(target, {\n    get(target, prop) {\n      return typeof target[prop] === 'object' ? ComputedProxyFactory(target[prop]) : computed(() => target[prop]);\n    }\n\n  });\n}\n/**\n * @typedef GlobalConfig\n * @property {String} [$registerAs] - Config Object\n * @property {String | Number | Symbol} [$scope] - A scope to limit child component registration\n * @property {Boolean} [$stopPropagation] - Tells a Vue component to stop sending its results up to the parent\n * @property {Ref<Object>} [$externalResults] - External error messages, like from server validation.\n * @property {Boolean} [$autoDirty] - Should the form watch for state changed, and automatically set `$dirty` to true.\n * @property {Boolean} [$lazy] - Should the validations be lazy, and run only after they are dirty\n * @property {Boolean} [$rewardEarly] - Once valid, re-runs property validators only on manual calls of $commit\n */\n\n/**\n * Composition API compatible Vuelidate\n * Use inside the `setup` lifecycle hook\n * @param {Object | GlobalConfig} [validations] - Validations Object or the globalConfig.\n * @param {Object} [state] - State object - required if `validations` is a validation object.\n * @param {GlobalConfig} [globalConfig] - Config Object\n * @return {ComputedRef<*>}\n */\n\n\nfunction useVuelidate(validations, state) {\n  var _getCurrentInstance;\n\n  let globalConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}; // if we pass only one argument, its most probably the globalConfig.\n  // This use case is so parents can just collect results of child forms.\n\n  if (arguments.length === 1) {\n    globalConfig = validations;\n    validations = undefined;\n    state = undefined;\n  }\n\n  let {\n    $registerAs,\n    $scope = CollectFlag.COLLECT_ALL,\n    $stopPropagation,\n    $externalResults,\n    currentVueInstance\n  } = globalConfig;\n  const instance = currentVueInstance || ((_getCurrentInstance = getCurrentInstance()) === null || _getCurrentInstance === void 0 ? void 0 : _getCurrentInstance.proxy);\n  const componentOptions = instance ? instance.$options : {}; // if there is no registration name, add one.\n\n  if (!$registerAs && instance) {\n    // NOTE:\n    // ._uid // Vue 2.x Composition-API plugin\n    // .uid // Vue 3.0\n    const uid = instance.uid || instance._uid;\n    $registerAs = `_vuelidate_${uid}`;\n  }\n\n  const validationResults = ref({});\n  const resultsCache = new ResultsStorage();\n  const {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  } = instance ? nestedValidations({\n    $scope,\n    instance\n  }) : {\n    childResults: ref({})\n  }; // Options API\n\n  if (!validations && componentOptions.validations) {\n    const rules = componentOptions.validations;\n    state = ref({});\n    onBeforeMount(() => {\n      // Delay binding state to validations defined with the Options API until mounting, when the data\n      // has been attached to the component instance. From that point on it will be reactive.\n      state.value = instance;\n      watch(() => isFunction(rules) ? rules.call(state.value, new ComputedProxyFactory(state.value)) : rules, validations => {\n        validationResults.value = setValidations({\n          validations,\n          state,\n          childResults,\n          resultsCache,\n          globalConfig,\n          instance,\n          externalResults: $externalResults || instance.vuelidateExternalResults\n        });\n      }, {\n        immediate: true\n      });\n    });\n    globalConfig = componentOptions.validationsConfig || globalConfig;\n  } else {\n    const validationsWatchTarget = isRef(validations) || isProxy(validations) ? validations // wrap plain objects in a reactive, so we can track changes if they have computed in them.\n    : reactive(validations || {});\n    watch(validationsWatchTarget, newValidationRules => {\n      validationResults.value = setValidations({\n        validations: newValidationRules,\n        state,\n        childResults,\n        resultsCache,\n        globalConfig,\n        instance: instance !== null && instance !== void 0 ? instance : {},\n        externalResults: $externalResults\n      });\n    }, {\n      immediate: true\n    });\n  }\n\n  if (instance) {\n    // send all the data to the parent when the function is invoked inside setup.\n    sendValidationResultsToParent.forEach(f => f(validationResults, {\n      $registerAs,\n      $scope,\n      $stopPropagation\n    })); // before this component is destroyed, remove all the data from the parent.\n\n    onBeforeUnmount(() => removeValidationResultsFromParent.forEach(f => f($registerAs)));\n  }\n\n  return computed(() => {\n    return Object.assign({}, unref(validationResults.value), childResults.value);\n  });\n}\n\nexport { CollectFlag, useVuelidate as default, useVuelidate };","map":{"version":3,"names":["isReactive","isReadonly","computed","unref","ref","watch","reactive","isRef","nextTick","inject","provide","getCurrentInstance","onBeforeMount","onBeforeUnmount","unwrapObj","obj","ignoreKeys","arguments","length","undefined","Object","keys","reduce","o","k","includes","isFunction","val","isProxy","value","get","stringPath","def","current","path","split","i","gatherBooleanGroupProperties","group","nestedResults","property","some","gatherArrayGroupProperties","all","fetchedProperty","concat","callRule","rule","siblingState","instance","call","normalizeValidatorResponse","result","$valid","createAsyncResult","model","$pending","$dirty","_ref","$response","$lazy","$rewardEarly","watchTargets","$lastInvalidState","$lastCommittedOn","$invalid","$pendingCounter","$unwatch","ruleResult","err","Promise","reject","resolve","then","data","catch","error","immediate","deep","createSyncResult","_ref2","returnValue","createValidatorResult","config","validatorName","propertyKey","propertyPath","$params","$async","$validator","$watchTargets","message","$message","$model","$propertyPath","$property","sortValidations","validationsRaw","validations","validationKeys","rules","nestedValidators","validationGroups","forEach","key","v","startsWith","_empty","ROOT_PATH","_call","body","direct","e","_callIgnored","_invoke","_async","f","args","apply","createValidationResults","resultsCache","externalResults","ruleKeys","cachedResult","$partial","$path","$touch","$reset","$commit","set","ruleKey","$externalResults","map","stringError","index","$uid","r","$error","$silentErrors","filter","res","$errors","Date","now","collectNestedValidationResults","nestedState","nestedExternalResults","nestedValidationKeys","results","nestedKey","setValidations","state","parentKey","globalConfig","createMetaFields","childResults","allResults","allRes","values","every","modelErrors","nestedErrors","errors","$anyDirty","nr","$validate","mergedConfig","unwatch","assign","s","cachedExternalResults","$validationGroups","entries","external","$autoDirty","flush","$getResultsForChild","$clearExternalResults","ResultsStorage","constructor","storage","Map","checkRulesValidity","storedRules","storedRulesKeys","newRulesKeys","hasAllValidators","paramKey","storedRuleResultPair","isValidCache","CollectFlag","COLLECT_ALL","COLLECT_NONE","VuelidateInjectChildResults","Symbol","VuelidateRemoveChildResults","nestedValidations","$scope","childResultsRaw","childResultsKeys","injectChildResultsIntoParent","$registerAs","childScope","$stopPropagation","push","__vuelidateInjectInstances","removeChildResultsFromParent","childKey","__vuelidateRemoveInstances","sendValidationResultsToParent","removeValidationResultsFromParent","ComputedProxyFactory","target","Proxy","prop","useVuelidate","_getCurrentInstance","currentVueInstance","proxy","componentOptions","$options","uid","_uid","validationResults","vuelidateExternalResults","validationsConfig","validationsWatchTarget","newValidationRules","default"],"sources":["/Users/root1/Developments/SberMeetingsWeb/WebApplication/vue-project/node_modules/@vuelidate/core/dist/index.esm.js"],"sourcesContent":["import { isReactive, isReadonly, computed, unref, ref, watch, reactive, isRef, nextTick, inject, provide, getCurrentInstance, onBeforeMount, onBeforeUnmount } from 'vue-demi';\n\nfunction unwrapObj(obj) {\n  let ignoreKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return Object.keys(obj).reduce((o, k) => {\n    if (ignoreKeys.includes(k)) return o;\n    o[k] = unref(obj[k]);\n    return o;\n  }, {});\n}\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\nfunction isProxy(value) {\n  return isReactive(value) || isReadonly(value);\n}\nfunction get(obj, stringPath, def) {\n  // Cache the current object\n  let current = obj;\n  const path = stringPath.split('.'); // For each item in the path, dig into the object\n\n  for (let i = 0; i < path.length; i++) {\n    // If the item isn't found, return the default (or null)\n    if (!current[path[i]]) return def; // Otherwise, update the current  value\n\n    current = current[path[i]];\n  }\n\n  return current;\n}\nfunction gatherBooleanGroupProperties(group, nestedResults, property) {\n  return computed(() => {\n    return group.some(path => {\n      return get(nestedResults, path, {\n        [property]: false\n      })[property];\n    });\n  });\n}\nfunction gatherArrayGroupProperties(group, nestedResults, property) {\n  return computed(() => {\n    return group.reduce((all, path) => {\n      const fetchedProperty = get(nestedResults, path, {\n        [property]: false\n      })[property] || [];\n      return all.concat(fetchedProperty);\n    }, []);\n  });\n}\n\n/**\n * Response form a raw Validator function.\n * Should return a Boolean or an object with $invalid property.\n * @typedef {Boolean | { $valid: Boolean }} ValidatorResponse\n */\n\n/**\n * Calls a validation rule by unwrapping its value first from a ref.\n * @param {Validator} rule\n * @param {Ref} value\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @return {Promise<ValidatorResponse> | ValidatorResponse}\n */\n\nfunction callRule(rule, value, siblingState, instance) {\n  return rule.call(instance, unref(value), unref(siblingState), instance);\n}\n/**\n * Normalizes the validator result\n * Allows passing a boolean of an object like `{ $valid: Boolean }`\n * @param {ValidatorResponse} result - Validator result\n * @return {boolean}\n */\n\n\nfunction normalizeValidatorResponse(result) {\n  return result.$valid !== undefined ? !result.$valid : !result;\n}\n/**\n * Returns the result of an async validator.\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $pending\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Ref<*>[]} watchTargets\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @param {Ref<Number>} $lastCommittedOn\n * @return {{ $invalid: Ref<Boolean>, $unwatch: WatchStopHandle }}\n */\n\n\nfunction createAsyncResult(rule, model, $pending, $dirty, _ref, $response, instance) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref;\n  let watchTargets = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n  let siblingState = arguments.length > 8 ? arguments[8] : undefined;\n  let $lastInvalidState = arguments.length > 9 ? arguments[9] : undefined;\n  let $lastCommittedOn = arguments.length > 10 ? arguments[10] : undefined;\n  const $invalid = ref(!!$dirty.value);\n  const $pendingCounter = ref(0);\n  $pending.value = false;\n  const $unwatch = watch([model, $dirty].concat(watchTargets, $lastCommittedOn), () => {\n    if ( // if $lazy and not dirty, return\n    $lazy && !$dirty.value || // if in $rewardEarly mode and no previous errors, nothing pending, return\n    $rewardEarly && !$lastInvalidState.value && !$pending.value) {\n      return;\n    }\n\n    let ruleResult; // make sure we dont break if a validator throws\n\n    try {\n      ruleResult = callRule(rule, model, siblingState, instance);\n    } catch (err) {\n      // convert to a promise, so we can handle it async\n      ruleResult = Promise.reject(err);\n    }\n\n    $pendingCounter.value++;\n    $pending.value = !!$pendingCounter.value; // ensure $invalid is false, while validator is resolving\n\n    $invalid.value = false;\n    Promise.resolve(ruleResult).then(data => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = data;\n      $invalid.value = normalizeValidatorResponse(data);\n    }).catch(error => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = error;\n      $invalid.value = true;\n    });\n  }, {\n    immediate: true,\n    deep: typeof model === 'object'\n  });\n  return {\n    $invalid,\n    $unwatch\n  };\n}\n/**\n * Returns the result of a sync validator\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {Boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @return {{$unwatch: (function(): {}), $invalid: ComputedRef<boolean>}}\n */\n\n\nfunction createSyncResult(rule, model, $dirty, _ref2, $response, instance, siblingState, $lastInvalidState) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref2;\n\n  const $unwatch = () => ({});\n\n  const $invalid = computed(() => {\n    if ( // return early if $lazy mode and not touched\n    $lazy && !$dirty.value || // If $rewardEarly mode is ON and last invalid was false (no error), return it.\n    // If we want to invalidate, we just flip the last state to true, causing the computed to run again\n    $rewardEarly && !$lastInvalidState.value) {\n      return false;\n    }\n\n    let returnValue = true;\n\n    try {\n      const result = callRule(rule, model, siblingState, instance);\n      $response.value = result;\n      returnValue = normalizeValidatorResponse(result);\n    } catch (err) {\n      $response.value = err;\n    }\n\n    return returnValue;\n  });\n  return {\n    $unwatch,\n    $invalid\n  };\n}\n/**\n * Returns the validation result.\n * Detects async and sync validators.\n * @param {NormalizedValidator} rule\n * @param {Ref<*>} model\n * @param {Ref<boolean>} $dirty\n * @param {GlobalConfig} config - Vuelidate config\n * @param {VueInstance} instance - component instance\n * @param {string} validatorName - name of the current validator\n * @param {string} propertyKey - the current property we are validating\n * @param {string} propertyPath - the deep path to the validated property\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState - the last invalid state\n * @param {Ref<Number>} $lastCommittedOn - the last time $commit was called\n * @return {{ $params: *, $message: Ref<String>, $pending: Ref<Boolean>, $invalid: Ref<Boolean>, $response: Ref<*>, $unwatch: WatchStopHandle }}\n */\n\n\nfunction createValidatorResult(rule, model, $dirty, config, instance, validatorName, propertyKey, propertyPath, siblingState, $lastInvalidState, $lastCommittedOn) {\n  const $pending = ref(false);\n  const $params = rule.$params || {};\n  const $response = ref(null);\n  let $invalid;\n  let $unwatch;\n\n  if (rule.$async) {\n    ({\n      $invalid,\n      $unwatch\n    } = createAsyncResult(rule.$validator, model, $pending, $dirty, config, $response, instance, rule.$watchTargets, siblingState, $lastInvalidState, $lastCommittedOn));\n  } else {\n    ({\n      $invalid,\n      $unwatch\n    } = createSyncResult(rule.$validator, model, $dirty, config, $response, instance, siblingState, $lastInvalidState));\n  }\n\n  const message = rule.$message;\n  const $message = isFunction(message) ? computed(() => message(unwrapObj({\n    $pending,\n    $invalid,\n    $params: unwrapObj($params),\n    // $params can hold refs, so we unwrap them for easy access\n    $model: model,\n    $response,\n    $validator: validatorName,\n    $propertyPath: propertyPath,\n    $property: propertyKey\n  }))) : message || '';\n  return {\n    $message,\n    $params,\n    $pending,\n    $invalid,\n    $response,\n    $unwatch\n  };\n}\n\n/**\n * Sorts a validation definition into rules, configs and nested validators.\n * @param {Object<NormalizedValidator|Function>} validationsRaw\n * @return {{ rules: Object<NormalizedValidator>, nestedValidators: Object, config: GlobalConfig }}\n */\n\nfunction sortValidations() {\n  let validationsRaw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const validations = unref(validationsRaw);\n  const validationKeys = Object.keys(validations);\n  const rules = {};\n  const nestedValidators = {};\n  const config = {};\n  let validationGroups = null;\n  validationKeys.forEach(key => {\n    const v = validations[key];\n\n    switch (true) {\n      // If it is already normalized, use it\n      case isFunction(v.$validator):\n        rules[key] = v;\n        break;\n      // If it is just a function, normalize it first\n      // into { $validator: <Fun> }\n\n      case isFunction(v):\n        rules[key] = {\n          $validator: v\n        };\n        break;\n\n      case key === '$validationGroups':\n        validationGroups = v;\n        break;\n      // Catch $-prefixed properties as config\n\n      case key.startsWith('$'):\n        config[key] = v;\n        break;\n      // If it doesnâ€™t match any of the above,\n      // treat as nestedValidators state property\n\n      default:\n        nestedValidators[key] = v;\n    }\n  });\n  return {\n    rules,\n    nestedValidators,\n    config,\n    validationGroups\n  };\n}\n\nfunction _empty() {}\n\nconst ROOT_PATH = '__root';\n/** @typedef {import('vue-demi').ComponentPublicInstance} VueInstance */\n\n/** @typedef {import('vue-demi').ComputedRef} ComputedRef */\n\n/** @typedef {import('vue-demi').UnwrapRef} UnwrapRef */\n\n/** @typedef {import('vue-demi').WatchStopHandle} WatchStopHandle */\n\n/** @typedef {import('vue-demi').WritableComputedRef} WritableComputedRef */\n\n/** @typedef {import('vue-demi').UnwrapNestedRefs} UnwrapNestedRefs */\n\n/**\n * @typedef NormalizedValidator\n * @property {Validator} $validator\n * @property {String | Ref<String> | function(*): string} [$message]\n * @property {Object | Ref<Object>} [$params]\n * @property {Object | Ref<Object>} [$async]\n * @property {Ref<*>[]} [$watchTargets]\n */\n\n/**\n * Raw validator function, before being normalized\n * Can return a Promise or a {@see ValidatorResponse}\n * @typedef {function(*): ((Promise<ValidatorResponse> | ValidatorResponse))} Validator\n */\n\n/**\n * @typedef ErrorObject\n * @property {Ref<String>} $message - Reactive error message\n * @property {Ref<Object>} $params - Params passed from withParams\n * @property {Ref<Boolean>} $pending - If validation is pending\n * @property {String} $property - State key\n * @property {String} $propertyPath - Dot notation path to state\n * @property {String} $validator - Validator name\n * @property {String} $uid - Unique identifier\n */\n\n/**\n * @typedef ValidationResult\n * @property {Ref<Boolean>} $pending\n * @property {Ref<Boolean>} $dirty\n * @property {Ref<Boolean>} $invalid\n * @property {Ref<Boolean>} $error\n * @property {Ref<String>} $path\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} $commit\n */\n\n/**\n * Creates the main Validation Results object for a state tree\n * Walks the tree's top level branches\n * @param {Object<NormalizedValidator>} rules - Rules for the current state tree\n * @param {Object} model - Current state value\n * @param {String} key - Key for the current state tree\n * @param {ResultsStorage} [resultsCache] - A cache map of all the validators\n * @param {String} [path] - the current property path\n * @param {GlobalConfig} [config] - the config object\n * @param {VueInstance} instance\n * @param {ComputedRef<Object>} externalResults\n * @param {Object} siblingState\n * @return {ValidationResult | {}}\n */\n\nfunction _call(body, then, direct) {\n  if (direct) {\n    return then ? then(body()) : body();\n  }\n\n  try {\n    var result = Promise.resolve(body());\n    return then ? result.then(then) : result;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n/**\n * Collects the validation results of all nested state properties\n * @param {Object<NormalizedValidator|Function>} validations - The validation\n * @param {Object} nestedState - Current state\n * @param {String} path - Path to current property\n * @param {ResultsStorage} resultsCache - Validations cache map\n * @param {GlobalConfig} config - The config object\n * @param {VueInstance} instance - The current Vue instance\n * @param {ComputedRef<object>} nestedExternalResults - The external results for this nested collection\n * @return {Object<string, VuelidateState>}\n */\n\n\nfunction _callIgnored(body, direct) {\n  return _call(body, _empty, direct);\n}\n\nfunction _invoke(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction createValidationResults(rules, model, key, resultsCache, path, config, instance, externalResults, siblingState) {\n  // collect the property keys\n  const ruleKeys = Object.keys(rules);\n  const cachedResult = resultsCache.get(path, rules);\n  const $dirty = ref(false); // state for the $rewardEarly option\n\n  /** The last invalid state of this property */\n\n  const $lastInvalidState = ref(false);\n  /** The last time $commit was called. Used to re-trigger async calls */\n\n  const $lastCommittedOn = ref(0);\n\n  if (cachedResult) {\n    // if the rules are the same as before, use the cached results\n    if (!cachedResult.$partial) return cachedResult; // remove old watchers\n\n    cachedResult.$unwatch(); // use the `$dirty.value`, so we dont save references by accident\n\n    $dirty.value = cachedResult.$dirty.value;\n  }\n\n  const result = {\n    // restore $dirty from cache\n    $dirty,\n    $path: path,\n    $touch: () => {\n      if (!$dirty.value) $dirty.value = true;\n    },\n    $reset: () => {\n      if ($dirty.value) $dirty.value = false;\n    },\n    $commit: () => {}\n  };\n  /**\n   * If there are no validation rules, it is most likely\n   * a top level state, aka root\n   */\n\n  if (!ruleKeys.length) {\n    // if there are cached results, we should overwrite them with the new ones\n    cachedResult && resultsCache.set(path, rules, result);\n    return result;\n  }\n\n  ruleKeys.forEach(ruleKey => {\n    result[ruleKey] = createValidatorResult(rules[ruleKey], model, result.$dirty, config, instance, ruleKey, key, path, siblingState, $lastInvalidState, $lastCommittedOn);\n  });\n  result.$externalResults = computed(() => {\n    if (!externalResults.value) return [];\n    return [].concat(externalResults.value).map((stringError, index) => ({\n      $propertyPath: path,\n      $property: key,\n      $validator: '$externalResults',\n      $uid: `${path}-externalResult-${index}`,\n      $message: stringError,\n      $params: {},\n      $response: null,\n      $pending: false\n    }));\n  });\n  result.$invalid = computed(() => {\n    const r = ruleKeys.some(ruleKey => unref(result[ruleKey].$invalid)); // cache the last invalid state\n\n    $lastInvalidState.value = r;\n    return !!result.$externalResults.value.length || r;\n  });\n  result.$pending = computed(() => ruleKeys.some(ruleKey => unref(result[ruleKey].$pending)));\n  result.$error = computed(() => result.$dirty.value ? result.$pending.value || result.$invalid.value : false);\n  result.$silentErrors = computed(() => ruleKeys.filter(ruleKey => unref(result[ruleKey].$invalid)).map(ruleKey => {\n    const res = result[ruleKey];\n    return reactive({\n      $propertyPath: path,\n      $property: key,\n      $validator: ruleKey,\n      $uid: `${path}-${ruleKey}`,\n      $message: res.$message,\n      $params: res.$params,\n      $response: res.$response,\n      $pending: res.$pending\n    });\n  }).concat(result.$externalResults.value));\n  result.$errors = computed(() => result.$dirty.value ? result.$silentErrors.value : []);\n\n  result.$unwatch = () => ruleKeys.forEach(ruleKey => {\n    result[ruleKey].$unwatch();\n  });\n\n  result.$commit = () => {\n    $lastInvalidState.value = true;\n    $lastCommittedOn.value = Date.now();\n  };\n\n  resultsCache.set(path, rules, result);\n  return result;\n}\n\nfunction collectNestedValidationResults(validations, nestedState, path, resultsCache, config, instance, nestedExternalResults) {\n  const nestedValidationKeys = Object.keys(validations); // if we have no state, return empty object\n\n  if (!nestedValidationKeys.length) return {};\n  return nestedValidationKeys.reduce((results, nestedKey) => {\n    // build validation results for nested state\n    results[nestedKey] = setValidations({\n      validations: validations[nestedKey],\n      state: nestedState,\n      key: nestedKey,\n      parentKey: path,\n      resultsCache,\n      globalConfig: config,\n      instance,\n      externalResults: nestedExternalResults\n    });\n    return results;\n  }, {});\n}\n/**\n * Generates the Meta fields from the results\n * @param {ValidationResult|{}} results\n * @param {Object.<string, VuelidateState>} nestedResults\n * @param {Object.<string, ValidationResult>} childResults\n * @return {{$anyDirty: Ref<Boolean>, $error: Ref<Boolean>, $invalid: Ref<Boolean>, $errors: Ref<ErrorObject[]>, $dirty: Ref<Boolean>, $touch: Function, $reset: Function }}\n */\n\n\nfunction createMetaFields(results, nestedResults, childResults) {\n  const allResults = computed(() => [nestedResults, childResults].filter(res => res).reduce((allRes, res) => {\n    return allRes.concat(Object.values(unref(res)));\n  }, [])); // returns `$dirty` as true, if all children are dirty\n\n  const $dirty = computed({\n    get() {\n      return results.$dirty.value || (allResults.value.length ? allResults.value.every(r => r.$dirty) : false);\n    },\n\n    set(v) {\n      results.$dirty.value = v;\n    }\n\n  });\n  const $silentErrors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unref(results.$silentErrors) || []; // collect all nested and child $silentErrors\n\n    const nestedErrors = allResults.value.filter(result => (unref(result).$silentErrors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$silentErrors);\n    }, []); // merge the $silentErrors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  const $errors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unref(results.$errors) || []; // collect all nested and child $errors\n\n    const nestedErrors = allResults.value.filter(result => (unref(result).$errors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$errors);\n    }, []); // merge the $errors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  const $invalid = computed(() => // if any of the nested values is invalid\n  allResults.value.some(r => r.$invalid) || // or if the current state is invalid\n  unref(results.$invalid) || // fallback to false if is root\n  false);\n  const $pending = computed(() => // if any of the nested values is pending\n  allResults.value.some(r => unref(r.$pending)) || // if any of the current state validators is pending\n  unref(results.$pending) || // fallback to false if is root\n  false);\n  const $anyDirty = computed(() => allResults.value.some(r => r.$dirty) || allResults.value.some(r => r.$anyDirty) || $dirty.value);\n  const $error = computed(() => $dirty.value ? $pending.value || $invalid.value : false);\n\n  const $touch = () => {\n    // call the root $touch\n    results.$touch(); // call all nested level $touch\n\n    allResults.value.forEach(result => {\n      result.$touch();\n    });\n  };\n\n  const $commit = () => {\n    // call the root $touch\n    results.$commit(); // call all nested level $touch\n\n    allResults.value.forEach(result => {\n      result.$commit();\n    });\n  };\n\n  const $reset = () => {\n    // reset the root $dirty state\n    results.$reset(); // reset all the children $dirty states\n\n    allResults.value.forEach(result => {\n      result.$reset();\n    });\n  }; // Ensure that if all child and nested results are $dirty, this also becomes $dirty\n\n\n  if (allResults.value.length && allResults.value.every(nr => nr.$dirty)) $touch();\n  return {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  };\n}\n/**\n * @typedef VuelidateState\n * @property {WritableComputedRef<any>} $model\n * @property {ComputedRef<Boolean>} $dirty\n * @property {ComputedRef<Boolean>} $error\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<Boolean>} $invalid\n * @property {ComputedRef<Boolean>} $anyDirty\n * @property {ComputedRef<Boolean>} $pending\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {String} $path\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} [$validate]\n * @property {Function} [$getResultsForChild]\n * @property {Object.<string, VuelidateState>}\n */\n\n/**\n * Main Vuelidate bootstrap function.\n * Used both for Composition API in `setup` and for Global App usage.\n * Used to collect validation state, when walking recursively down the state tree\n * @param {Object} params\n * @param {Object<NormalizedValidator|Function>} params.validations\n * @param {Object} params.state\n * @param {String} [params.key] - Current state property key. Used when being called on nested items\n * @param {String} [params.parentKey] - Parent state property key. Used when being called recursively\n * @param {Object<string, ValidationResult>} [params.childResults] - Used to collect child results.\n * @param {ResultsStorage} params.resultsCache - The cached validation results\n * @param {VueInstance} params.instance - The current Vue instance\n * @param {GlobalConfig} params.globalConfig - The validation config, passed to this setValidations instance.\n * @param {UnwrapNestedRefs<object> | Ref<Object>} params.externalResults - External validation results\n * @return {UnwrapNestedRefs<VuelidateState>}\n */\n\n\nfunction setValidations(_ref) {\n  /**\n   * Executes the validators and returns the result.\n   * @return {Promise<boolean>}\n   */\n  const $validate = _async(function () {\n    $touch();\n    return _invoke(function () {\n      if (mergedConfig.$rewardEarly) {\n        $commit(); // await the watchers\n\n        return _callIgnored(nextTick);\n      }\n    }, function () {\n      // await the watchers\n      return _call(nextTick, function () {\n        return new Promise(resolve => {\n          // return whether it is valid or not\n          if (!$pending.value) return resolve(!$invalid.value);\n          const unwatch = watch($pending, () => {\n            resolve(!$invalid.value);\n            unwatch();\n          });\n        });\n      });\n    });\n  });\n  /**\n   * Returns a child component's results, based on registration name\n   * @param {string} key\n   * @return {VuelidateState}\n   */\n\n\n  let {\n    validations,\n    state,\n    key,\n    parentKey,\n    childResults,\n    resultsCache,\n    globalConfig = {},\n    instance,\n    externalResults\n  } = _ref;\n  const path = parentKey ? `${parentKey}.${key}` : key; // Sort out the validation object into:\n  // â€“ rules = validators for current state tree fragment\n  // â€” nestedValidators = nested state fragments keys that might contain more validators\n  // â€“ config = configuration properties that affect this state fragment\n\n  const {\n    rules,\n    nestedValidators,\n    config,\n    validationGroups\n  } = sortValidations(validations);\n  const mergedConfig = Object.assign({}, globalConfig, config); // create protected state for cases when the state branch does not exist yet.\n  // This protects when using the OptionsAPI as the data is bound after the setup method\n\n  const nestedState = key ? computed(() => {\n    const s = unref(state);\n    return s ? unref(s[key]) : undefined;\n  }) : state; // cache the external results, so we can revert back to them\n\n  const cachedExternalResults = Object.assign({}, unref(externalResults) || {});\n  const nestedExternalResults = computed(() => {\n    const results = unref(externalResults);\n    if (!key) return results;\n    return results ? unref(results[key]) : undefined;\n  }); // Use rules for the current state fragment and validate it\n\n  const results = createValidationResults(rules, nestedState, key, resultsCache, path, mergedConfig, instance, nestedExternalResults, state); // Use nested keys to repeat the process\n  // *WARN*: This is recursive\n\n  const nestedResults = collectNestedValidationResults(nestedValidators, nestedState, path, resultsCache, mergedConfig, instance, nestedExternalResults);\n  const $validationGroups = {};\n\n  if (validationGroups) {\n    Object.entries(validationGroups).forEach(_ref2 => {\n      let [key, group] = _ref2;\n      $validationGroups[key] = {\n        $invalid: gatherBooleanGroupProperties(group, nestedResults, '$invalid'),\n        $error: gatherBooleanGroupProperties(group, nestedResults, '$error'),\n        $pending: gatherBooleanGroupProperties(group, nestedResults, '$pending'),\n        $errors: gatherArrayGroupProperties(group, nestedResults, '$errors'),\n        $silentErrors: gatherArrayGroupProperties(group, nestedResults, '$silentErrors')\n      };\n    });\n  } // Collect and merge this level validation results\n  // with all nested validation results\n\n\n  const {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  } = createMetaFields(results, nestedResults, childResults);\n  /**\n   * If we have no `key`, this is the top level state\n   * We dont need `$model` there.\n   */\n\n  const $model = key ? computed({\n    get: () => unref(nestedState),\n    set: val => {\n      $dirty.value = true;\n      const s = unref(state);\n      const external = unref(externalResults);\n\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n\n      if (isRef(s[key])) {\n        s[key].value = val;\n      } else {\n        s[key] = val;\n      }\n    }\n  }) : null;\n\n  if (key && mergedConfig.$autoDirty) {\n    watch(nestedState, () => {\n      if (!$dirty.value) $touch();\n      const external = unref(externalResults);\n\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n    }, {\n      flush: 'sync'\n    });\n  }\n\n  function $getResultsForChild(key) {\n    return (childResults.value || {})[key];\n  }\n\n  function $clearExternalResults() {\n    if (isRef(externalResults)) {\n      externalResults.value = cachedExternalResults;\n    } else {\n      // if the external results state was empty, we need to delete every property, one by one\n      if (Object.keys(cachedExternalResults).length === 0) {\n        Object.keys(externalResults).forEach(k => {\n          delete externalResults[k];\n        });\n      } else {\n        // state was not empty, so we just assign it back into the current state\n        Object.assign(externalResults, cachedExternalResults);\n      }\n    }\n  }\n\n  return reactive(Object.assign({}, results, {\n    // NOTE: The order here is very important, since we want to override\n    // some of the *results* meta fields with the collective version of it\n    // that includes the results of nested state validation results\n    $model,\n    $dirty,\n    $error,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $pending,\n    $touch,\n    $reset,\n    $path: path || ROOT_PATH,\n    $silentErrors,\n    $validate,\n    $commit\n  }, childResults && {\n    $getResultsForChild,\n    $clearExternalResults,\n    $validationGroups\n  }, nestedResults));\n}\n\nclass ResultsStorage {\n  constructor() {\n    this.storage = new Map();\n  }\n  /**\n   * Stores a validation result, and its rules by its path\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {ValidationResult} result\n   */\n\n\n  set(path, rules, result) {\n    this.storage.set(path, {\n      rules,\n      result\n    });\n  }\n  /**\n   * Check if the stored `results` for the provided `path` have the same `rules` compared to 'storedRules'\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {Object<NormalizedValidator>} storedRules\n   * @return {Boolean}\n   */\n\n\n  checkRulesValidity(path, rules, storedRules) {\n    const storedRulesKeys = Object.keys(storedRules);\n    const newRulesKeys = Object.keys(rules);\n    if (newRulesKeys.length !== storedRulesKeys.length) return false;\n    const hasAllValidators = newRulesKeys.every(ruleKey => storedRulesKeys.includes(ruleKey));\n    if (!hasAllValidators) return false;\n    return newRulesKeys.every(ruleKey => {\n      if (!rules[ruleKey].$params) return true;\n      return Object.keys(rules[ruleKey].$params).every(paramKey => {\n        // make sure to unwrap before comparing\n        return unref(storedRules[ruleKey].$params[paramKey]) === unref(rules[ruleKey].$params[paramKey]);\n      });\n    });\n  }\n  /**\n   * Returns the matched result if catche is valid\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @return {{$partial: boolean, $dirty: Ref<Boolean>, $unwatch: function}|undefined|ValidationResult}\n   */\n\n\n  get(path, rules) {\n    const storedRuleResultPair = this.storage.get(path);\n    if (!storedRuleResultPair) return undefined;\n    const {\n      rules: storedRules,\n      result\n    } = storedRuleResultPair;\n    const isValidCache = this.checkRulesValidity(path, rules, storedRules);\n    const $unwatch = result.$unwatch ? result.$unwatch : () => ({});\n    if (!isValidCache) return {\n      $dirty: result.$dirty,\n      $partial: true,\n      $unwatch\n    };\n    return result;\n  }\n\n}\n\nconst CollectFlag = {\n  COLLECT_ALL: true,\n  COLLECT_NONE: false\n};\nconst VuelidateInjectChildResults = Symbol('vuelidate#injectChildResults');\nconst VuelidateRemoveChildResults = Symbol('vuelidate#removeChildResults');\n/**\n * Create helpers to collect validation state from child components\n * @param {Object} params\n * @param {String | Number | Boolean} params.$scope - Parent component scope\n * @return {{sendValidationResultsToParent: function[], childResults: ComputedRef<Object>, removeValidationResultsFromParent: function[]}}\n */\n\nfunction nestedValidations(_ref) {\n  let {\n    $scope,\n    instance\n  } = _ref;\n  const childResultsRaw = {};\n  const childResultsKeys = ref([]);\n  const childResults = computed(() => childResultsKeys.value.reduce((results, key) => {\n    results[key] = unref(childResultsRaw[key]);\n    return results;\n  }, {}));\n  /**\n   * Allows children to send validation data up to their parent.\n   * @param {Object} results - the results\n   * @param {Object} args\n   * @param {String} args.$registerAs - the $registeredAs key\n   * @param {String | Number | Boolean} args.$scope - the $scope key\n   */\n\n  function injectChildResultsIntoParent(results, _ref2) {\n    let {\n      $registerAs: key,\n      $scope: childScope,\n      $stopPropagation\n    } = _ref2;\n    if ($stopPropagation || $scope === CollectFlag.COLLECT_NONE || childScope === CollectFlag.COLLECT_NONE || $scope !== CollectFlag.COLLECT_ALL && $scope !== childScope) return;\n    childResultsRaw[key] = results;\n    childResultsKeys.value.push(key);\n  } // combine with other `injectChildResultsIntoParent` from vuelidate instances in this Vue component instance\n\n\n  instance.__vuelidateInjectInstances = [].concat(instance.__vuelidateInjectInstances || [], injectChildResultsIntoParent);\n  /**\n   * Allows children to remove the validation data from their parent, before getting destroyed.\n   * @param {String} key - the registeredAs key\n   */\n\n  function removeChildResultsFromParent(key) {\n    // remove the key\n    childResultsKeys.value = childResultsKeys.value.filter(childKey => childKey !== key); // remove the stored data for the key\n\n    delete childResultsRaw[key];\n  } // combine with other `removeChildResultsFromParent` from vuelidate instances in this Vue component instance\n\n\n  instance.__vuelidateRemoveInstances = [].concat(instance.__vuelidateRemoveInstances || [], removeChildResultsFromParent); // inject the `injectChildResultsIntoParent` method, into the current scope\n\n  const sendValidationResultsToParent = inject(VuelidateInjectChildResults, []); // provide to all of its children the send results to parent function\n\n  provide(VuelidateInjectChildResults, instance.__vuelidateInjectInstances);\n  const removeValidationResultsFromParent = inject(VuelidateRemoveChildResults, []); // provide to all of its children the remove results  function\n\n  provide(VuelidateRemoveChildResults, instance.__vuelidateRemoveInstances);\n  return {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  };\n}\n\n/**\n * Helper proxy for instance property access. It makes every reference\n * reactive for the validation function\n * @param target\n * @return {*|ComputedRef<*>}\n */\n\nfunction ComputedProxyFactory(target) {\n  return new Proxy(target, {\n    get(target, prop) {\n      return typeof target[prop] === 'object' ? ComputedProxyFactory(target[prop]) : computed(() => target[prop]);\n    }\n\n  });\n}\n\n/**\n * @typedef GlobalConfig\n * @property {String} [$registerAs] - Config Object\n * @property {String | Number | Symbol} [$scope] - A scope to limit child component registration\n * @property {Boolean} [$stopPropagation] - Tells a Vue component to stop sending its results up to the parent\n * @property {Ref<Object>} [$externalResults] - External error messages, like from server validation.\n * @property {Boolean} [$autoDirty] - Should the form watch for state changed, and automatically set `$dirty` to true.\n * @property {Boolean} [$lazy] - Should the validations be lazy, and run only after they are dirty\n * @property {Boolean} [$rewardEarly] - Once valid, re-runs property validators only on manual calls of $commit\n */\n\n/**\n * Composition API compatible Vuelidate\n * Use inside the `setup` lifecycle hook\n * @param {Object | GlobalConfig} [validations] - Validations Object or the globalConfig.\n * @param {Object} [state] - State object - required if `validations` is a validation object.\n * @param {GlobalConfig} [globalConfig] - Config Object\n * @return {ComputedRef<*>}\n */\n\nfunction useVuelidate(validations, state) {\n  var _getCurrentInstance;\n\n  let globalConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  // if we pass only one argument, its most probably the globalConfig.\n  // This use case is so parents can just collect results of child forms.\n  if (arguments.length === 1) {\n    globalConfig = validations;\n    validations = undefined;\n    state = undefined;\n  }\n\n  let {\n    $registerAs,\n    $scope = CollectFlag.COLLECT_ALL,\n    $stopPropagation,\n    $externalResults,\n    currentVueInstance\n  } = globalConfig;\n  const instance = currentVueInstance || ((_getCurrentInstance = getCurrentInstance()) === null || _getCurrentInstance === void 0 ? void 0 : _getCurrentInstance.proxy);\n  const componentOptions = instance ? instance.$options : {}; // if there is no registration name, add one.\n\n  if (!$registerAs && instance) {\n    // NOTE:\n    // ._uid // Vue 2.x Composition-API plugin\n    // .uid // Vue 3.0\n    const uid = instance.uid || instance._uid;\n    $registerAs = `_vuelidate_${uid}`;\n  }\n\n  const validationResults = ref({});\n  const resultsCache = new ResultsStorage();\n  const {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  } = instance ? nestedValidations({\n    $scope,\n    instance\n  }) : {\n    childResults: ref({})\n  }; // Options API\n\n  if (!validations && componentOptions.validations) {\n    const rules = componentOptions.validations;\n    state = ref({});\n    onBeforeMount(() => {\n      // Delay binding state to validations defined with the Options API until mounting, when the data\n      // has been attached to the component instance. From that point on it will be reactive.\n      state.value = instance;\n      watch(() => isFunction(rules) ? rules.call(state.value, new ComputedProxyFactory(state.value)) : rules, validations => {\n        validationResults.value = setValidations({\n          validations,\n          state,\n          childResults,\n          resultsCache,\n          globalConfig,\n          instance,\n          externalResults: $externalResults || instance.vuelidateExternalResults\n        });\n      }, {\n        immediate: true\n      });\n    });\n    globalConfig = componentOptions.validationsConfig || globalConfig;\n  } else {\n    const validationsWatchTarget = isRef(validations) || isProxy(validations) ? validations // wrap plain objects in a reactive, so we can track changes if they have computed in them.\n    : reactive(validations || {});\n    watch(validationsWatchTarget, newValidationRules => {\n      validationResults.value = setValidations({\n        validations: newValidationRules,\n        state,\n        childResults,\n        resultsCache,\n        globalConfig,\n        instance: instance !== null && instance !== void 0 ? instance : {},\n        externalResults: $externalResults\n      });\n    }, {\n      immediate: true\n    });\n  }\n\n  if (instance) {\n    // send all the data to the parent when the function is invoked inside setup.\n    sendValidationResultsToParent.forEach(f => f(validationResults, {\n      $registerAs,\n      $scope,\n      $stopPropagation\n    })); // before this component is destroyed, remove all the data from the parent.\n\n    onBeforeUnmount(() => removeValidationResultsFromParent.forEach(f => f($registerAs)));\n  }\n\n  return computed(() => {\n    return Object.assign({}, unref(validationResults.value), childResults.value);\n  });\n}\n\nexport { CollectFlag, useVuelidate as default, useVuelidate };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}