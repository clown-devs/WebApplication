{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, normalizeClass as _normalizeClass, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, vModelCheckbox as _vModelCheckbox, toDisplayString as _toDisplayString, withModifiers as _withModifiers, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-15717af5\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"login-container\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", {\n  class: \"title\"\n}, \"Вход в систему\", -1\n/* HOISTED */\n));\n\nconst _hoisted_3 = {\n  key: 0,\n  class: \"validate-error-message\",\n  id: \"test\"\n};\nconst _hoisted_4 = {\n  key: 1,\n  class: \"validate-error-message\"\n};\nconst _hoisted_5 = {\n  key: 2,\n  class: \"validate-error-message\"\n};\nconst _hoisted_6 = {\n  class: \"save-container\"\n};\n\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"save\",\n  class: \"save-label\"\n}, \"Запомнить\", -1\n/* HOISTED */\n));\n\nconst _hoisted_8 = {\n  key: 3,\n  class: \"error-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"form\", {\n    onSubmit: _cache[4] || (_cache[4] = _withModifiers(() => {}, [\"prevent\"]))\n  }, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"login\",\n    name: \"user_login\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.username = $event),\n    placeholder: \"Введите логин...\",\n    class: _normalizeClass({\n      invalid: $setup.v$.username.$error\n    })\n  }, null, 2\n  /* CLASS */\n  ), [[_vModelText, $data.username]]), $setup.v$.username.$error ? (_openBlock(), _createElementBlock(\"small\", _hoisted_3, \" Логин не должен быть пустым! \")) : _createCommentVNode(\"v-if\", true), _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"password\",\n    name: \"user_password\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.password = $event),\n    placeholder: \"Введите пароль...\",\n    class: _normalizeClass({\n      invalid: $setup.v$.password.$error\n    })\n  }, null, 2\n  /* CLASS */\n  ), [[_vModelText, $data.password]]), $setup.v$.password.$dirty && $setup.v$.password.required.$invalid ? (_openBlock(), _createElementBlock(\"small\", _hoisted_4, \" Пароль является обязательным полем! \")) : _createCommentVNode(\"v-if\", true), $setup.v$.password.minLength.$invalid ? (_openBlock(), _createElementBlock(\"small\", _hoisted_5, \" Длина пароля должна быть больше 3 символов! \")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_6, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    id: \"save\",\n    name: \"selected_save\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.isSavedSession = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelCheckbox, $data.isSavedSession]]), _hoisted_7]), _createElementVNode(\"button\", {\n    type: \"submit\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.touchLogIn && $options.touchLogIn(...args))\n  }, \"Далее\"), $options.isHaveErrorAuth() ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, _toDisplayString(this.$store.state.auth.errorMessage), 1\n  /* TEXT */\n  )) : _createCommentVNode(\"v-if\", true)], 32\n  /* HYDRATE_EVENTS */\n  )]);\n}","map":{"version":3,"mappings":";;;;;EACOA,KAAK,EAAC;;;gEAEPC,oBAAqC,IAArC,EAAqC;EAAjCD,KAAK,EAAC;AAA2B,CAArC,EAAkB,gBAAlB,EAAgC;AAAA;AAAhC;;;;EASiCA,KAAK,EAAC;EAAyBE,EAAE,EAAC;;;;EAYDF,KAAK,EAAC;;;;EAG3BA,KAAK,EAAC;;;EAI9CA,KAAK,EAAC;;;gEAOTC,oBAAsD,OAAtD,EAAsD;EAA/CE,GAAG,EAAC,MAA2C;EAApCH,KAAK,EAAC;AAA8B,CAAtD,EAAqC,WAArC,EAA8C;AAAA;AAA9C;;;;EAI4BA,KAAK,EAAC;;;uBAzCxCI,oBA6CM,KA7CN,cA6CM,CA5CJH,oBA2CO,MA3CP,EA2CO;IA3CAI,QAAM,2CAAP,OAAe,CAAR,EAAQ,WAAR;EA2CN,CA3CP,GACEC,4BACAL,oBAOE,OAPF,EAOE;IANAM,IAAI,EAAC,MAML;IALAL,EAAE,EAAC,OAKH;IAJAM,IAAI,EAAC,YAIL;+DAHSC,iBAAQC,OAGjB;IAFAC,WAAW,EAAC,kBAEZ;IADCX,KAAK;MAAAY,SAAaC,UAAGC,QAAH,CAAYC;IAAzB;EACN,CAPF;;EAAA,kBAIWN,mBAIEI,UAAGC,QAAH,CAAYC,wBAAzBX,oBAEQ,OAFR,cAA0E,gCAA1E,wDAIAH,oBAOE,OAPF,EAOE;IANAM,IAAI,EAAC,UAML;IALAL,EAAE,EAAC,UAKH;IAJAM,IAAI,EAAC,eAIL;+DAHSC,iBAAQC,OAGjB;IAFAC,WAAW,EAAC,mBAEZ;IADCX,KAAK;MAAAY,SAAaC,UAAGG,QAAH,CAAYD;IAAzB;EACN,CAPF;;EAAA,kBAIWN,mBAIEI,UAAGG,QAAH,CAAYC,MAAZ,IAAsBJ,UAAGG,QAAH,CAAYE,QAAZ,CAAqBC,0BAAxDf,oBAEQ,OAFR,cAAiG,uCAAjG,wCAGaS,UAAGG,QAAH,CAAYI,SAAZ,CAAsBD,0BAAnCf,oBAEQ,OAFR,cAA4E,+CAA5E,wCAIAH,oBAQM,KARN,cAQM,iBAPJA,oBAKE,OALF,EAKE;IAJAM,IAAI,EAAC,UAIL;IAHAL,EAAE,EAAC,MAGH;IAFAM,IAAI,EAAC,eAEL;+DADSC,uBAAcC;EACvB,CALF;;EAAA,sBAIWD,uBAGP,EADJY,UACI,CARN,GASApB,oBAAwD,QAAxD,EAAwD;IAAhDM,IAAI,EAAC,QAA2C;IAAjCe,OAAK,yCAAEC,mDAAF;EAA4B,CAAxD,EAA0C,OAA1C,GAEWA,4CAAXnB,oBAEM,KAFN,cAEMoB,sBADIC,MACJ,CADWC,KACX,CADiBC,IACjB,CADsBC,YACtB,CAFN,EACwC;EAAA;EADxC,uCAxCF;;EAAA,CA4CI,CA7CN","names":["class","_createElementVNode","id","for","_createElementBlock","onSubmit","_hoisted_2","type","name","$data","$event","placeholder","invalid","$setup","username","$error","password","$dirty","required","$invalid","minLength","_hoisted_7","onClick","$options","_toDisplayString","$store","state","auth","errorMessage"],"sourceRoot":"","sources":["/Users/root1/Developments/SberMeetingsWeb/WebApplication/vue-project/src/pages/Login.vue"],"sourcesContent":["<template>\n  <div class=\"login-container\">\n    <form @submit.prevent>\n      <h1 class=\"title\">Вход в систему</h1>\n      <input\n        type=\"text\"\n        id=\"login\"\n        name=\"user_login\"\n        v-model=\"username\"\n        placeholder=\"Введите логин...\"\n        :class=\"{ invalid: v$.username.$error }\"\n      />\n      <small v-if=\"v$.username.$error\" class=\"validate-error-message\" id=\"test\">\n        Логин не должен быть пустым!\n      </small>\n      \n      <input\n        type=\"password\"\n        id=\"password\"\n        name=\"user_password\"\n        v-model=\"password\"\n        placeholder=\"Введите пароль...\"\n        :class=\"{ invalid: v$.password.$error}\"\n      />\n      <small v-if=\"v$.password.$dirty && v$.password.required.$invalid\" class=\"validate-error-message\">\n        Пароль является обязательным полем!\n      </small>\n      <small v-if=\"v$.password.minLength.$invalid\" class=\"validate-error-message\">\n        Длина пароля должна быть больше 3 символов!\n      </small>\n\n      <div class=\"save-container\">\n        <input\n          type=\"checkbox\"\n          id=\"save\"\n          name=\"selected_save\"\n          v-model=\"isSavedSession\"\n        />\n        <label for=\"save\" class=\"save-label\">Запомнить</label>\n      </div>\n      <button type=\"submit\" @click=\"touchLogIn\">Далее</button>\n\n      <div v-if=\"isHaveErrorAuth()\" class=\"error-container\">\n        {{ this.$store.state.auth.errorMessage }}\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { mapActions } from \"vuex\";\nimport useVuelidate from \"@vuelidate/core\";\nimport { required, minLength } from \"@vuelidate/validators\";\n\nexport default {\n  setup() {\n    return {\n      v$: useVuelidate(),\n    };\n  },\n\n  data() {\n    return {\n      username: \"\",\n      password: \"\",\n      isSavedSession: false,\n      passwordPlaceholder: \"Введите пароль...\",\n      loginPlaceholder: \"Введите логин...\",\n    };\n  },\n\n  validations() {\n    return {\n      username: { required },\n      password: { required, minLength: minLength(4) },\n    };\n  },\n\n  methods: {\n    ...mapActions([\"logIn\"]),\n\n    async touchLogIn() {\n\n      const isCorrectForm = await this.v$.$validate();\n      if (!isCorrectForm) {\n        return;\n      }\n\n      const isAuth = await this.logIn({\n        username: this.username,\n        password: this.password,\n        isSavedSession: this.isSavedSession,\n      });\n\n      if (isAuth) {\n        this.$router.push(\"/\");\n        return;\n      }\n\n      this.$router.push(\"/login\");\n    },\n\n    isHaveErrorAuth() {\n      return this.$store.state.auth.errorMessage !== \"\";\n    },\n\n    isValidForm() {\n      const MAX_PASSWORD_LEN = 4;\n\n      this.validationErrors = [];\n\n      if (this.username.length && this.password.length >= MAX_PASSWORD_LEN) {\n        return true;\n      }\n\n      return false;\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Main */\n\n.login-container {\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\nform {\n  background: rgba(255, 255, 255, 0.58);\n  border: 1px solid #47af52;\n  border-radius: 30px;\n  width: 596px;\n  height: 660px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\nh1 {\n  color: #00b268;\n  font-size: 2rem;\n  text-align: center;\n  font-weight: normal;\n  margin-top: 16.36%;\n  margin-bottom: 13.03%;\n  width: 80.8%;\n}\n\ninput {\n  width: 80.8%;\n  background: rgba(255, 255, 255, 0);\n  border-bottom-color: #00b268;\n  border-top-style: none;\n  border-left-style: none;\n  border-right-style: none;\n}\n\ninput,\nlabel {\n  font-size: 1.25rem;\n  color: #00000085;\n}\n\ninput[type=\"text\"] {\n  margin-bottom: 18.18%;\n}\n\ninput[type=\"password\"] {\n  margin-bottom: 5.45%;\n  background: rgba(255, 255, 255, 0);\n}\n\n.save-container {\n  display: flex;\n  align-self: flex-start;\n  align-items: center;\n  margin-left: 9.56%;\n  margin-bottom: 8.48%;\n}\n\ninput[type=\"checkbox\"] {\n  min-width: 20px;\n  min-height: 20px;\n  margin-right: 10px;\n}\n\nbutton {\n  background: #47af52;\n  color: #ffffff;\n  font-size: 1.5rem;\n  border-radius: 30px;\n  border-width: 0;\n  width: 237px;\n  height: 60px;\n}\n\n.error-container {\n  margin-top: 2.5rem;\n  color: red;\n  font-weight: bolder;\n}\n\n/* Validation styles */\n\ninput[type=\"text\"].invalid {\n  border-bottom-color: red;\n  margin-bottom: 5px;\n}\n\ninput[type=\"password\"].invalid {\n  border-bottom-color: red;\n  margin-bottom: 5px;\n}\n\n.validate-error-message {\n  color: red;\n  font-weight: bolder;\n  margin: 0;\n}\n\n</style>"]},"metadata":{},"sourceType":"module"}