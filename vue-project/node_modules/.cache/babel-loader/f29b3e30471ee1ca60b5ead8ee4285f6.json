{"ast":null,"code":"import axios from \"./instance\";\nconst API_KEY = 'api/v2/';\nconst OLD_API_KEY = 'api/v1/';\nconst API_PATHS = {\n  auth: 'users/auth/token/login/',\n  user: 'users/employee/current/',\n  meetings: 'meeting',\n  client: 'client/'\n};\nconst api = {\n  error: {},\n\n  async auth(username, password) {\n    try {\n      const res = await axios.post(API_KEY + API_PATHS['auth'], {\n        username,\n        password\n      });\n      return res.data;\n    } catch (error) {\n      this.errorHandle(error);\n      return null;\n    }\n  },\n\n  async currentUser(token) {\n    try {\n      const res = await axios.get(API_KEY + API_PATHS['user'], {\n        headers: {\n          \"Authorization\": \"Token \" + token\n        }\n      });\n      return res.data;\n    } catch (error) {\n      this.errorHandle(error);\n      return null;\n    }\n  },\n\n  async getMeetings(past = false) {\n    try {\n      const res = await axios.get(OLD_API_KEY + API_PATHS['meetings'] + (past ? '?past=true' : '/'));\n      return res.data;\n    } catch (error) {\n      this.errorHandle(error);\n      return [];\n    }\n  },\n\n  async getClient(id) {\n    try {\n      const res = await axios.get(OLD_API_KEY + API_PATHS['client'] + String(id));\n      return res.data;\n    } catch (error) {\n      this.errorHandle(error);\n      return;\n    }\n  },\n\n  async getClients() {\n    try {\n      const clients = await axios.get(OLD_API_KEY + API_PATHS['client']).data;\n      const result = new Map();\n      clients.data.forEach(function (item, i, arr) {\n        alert(i + \": \" + item + \" (массив:\" + arr + \")\");\n      });\n      return result;\n    } catch (error) {\n      this.errorHandle(error);\n      return new Map();\n    }\n  },\n\n  errorHandle(error) {\n    if (error.response) {\n      switch (error.response.status) {\n        case 400:\n          this.error = \"Неверный логин/пароль\";\n          break;\n\n        case 401:\n          this.error = error.response.statusText + \".\" + error.response.data.detail;\n          break;\n\n        default:\n          this.error = error.message + \".\" + error.response.statusText;\n      }\n    } else if (error.request) {\n      this.error = \"Bad connection\";\n    } else {//\n    }\n  }\n\n};\nexport default api;","map":{"version":3,"names":["axios","API_KEY","OLD_API_KEY","API_PATHS","auth","user","meetings","client","api","error","username","password","res","post","data","errorHandle","currentUser","token","get","headers","getMeetings","past","getClient","id","String","getClients","clients","result","Map","forEach","item","i","arr","alert","response","status","statusText","detail","message","request"],"sources":["/Users/root1/Developments/SberMeetingsWeb/WebApplication/vue-project/src/api/index.js"],"sourcesContent":["import axios from \"./instance\";\n\nconst API_KEY = 'api/v2/';\nconst OLD_API_KEY = 'api/v1/';\n\nconst API_PATHS = {\n    auth: 'users/auth/token/login/',\n    user: 'users/employee/current/',\n    meetings: 'meeting',\n    client: 'client/'\n}\n\nconst api = {\n    \n    error: {},\n\n    async auth(username, password) {\n        \n        try {\n            const res = await axios.post(API_KEY + API_PATHS['auth'], {\n                username,\n                password\n            });\n\n            return res.data;\n\n        } catch (error) {\n            this.errorHandle(error);\n            return null;\n        }\n        \n    },\n\n    async currentUser(token) {\n        try {\n            const res = await axios.get(API_KEY + API_PATHS['user'], {\n                headers: {\n                    \"Authorization\": \"Token \" + token\n                }\n            });\n    \n            return res.data;\n\n        } catch(error) {\n            this.errorHandle(error);\n            return null;\n        }\n    },\n\n    async getMeetings(past = false) {\n       \n        try {\n            const res = await axios.get(\n                OLD_API_KEY + API_PATHS['meetings'] + (past ? '?past=true' : '/')\n            );\n            return res.data;\n\n        } catch (error) {\n            this.errorHandle(error);\n            return [];\n        }\n\n    },\n\n    async getClient(id) {\n        try {\n            const res = await axios.get(\n                OLD_API_KEY + API_PATHS['client'] + String(id)\n            );\n            return res.data;\n\n        } catch (error) {\n            this.errorHandle(error);\n            return;\n        } \n    },\n\n    async getClients() {\n        try {\n            const clients = await axios.get(\n                OLD_API_KEY + API_PATHS['client']\n            ).data;\n            \n            const result = new Map();\n            clients.data.forEach(function(item, i, arr) {\n                alert( i + \": \" + item + \" (массив:\" + arr + \")\" );\n              });\n            return result;\n\n        } catch (error) {\n            this.errorHandle(error);\n            return new Map();\n        }     \n    },\n\n    errorHandle(error) {\n        \n        if (error.response) {\n\n            switch (error.response.status) {\n                case 400:\n                    this.error = \"Неверный логин/пароль\";\n                    break;\n                case 401:\n                    this.error = \n                        error.response.statusText \n                        + \".\" \n                        + error.response.data.detail\n                    ;\n                    break;\n                default:\n                    this.error = error.message + \".\" + error.response.statusText;\n            }\n            \n        } else if (error.request) {\n            \n            this.error = \"Bad connection\";\n\n        } else {\n\n            //\n\n        }    \n    }\n\n};\n\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module"}